// Generated by CoffeeScript 1.9.3
"use strict";
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

!(function($, win, doc) {
  var $doc, $win;
  $doc = $(doc);
  $win = $(win);
  win.EditorMenu = (function() {
    function EditorMenu(editor, sidebar) {
      this.editor = editor;
      this.sidebar = sidebar;
      this.panels = {
        tree: true,
        help: false,
        storyboard: false,
        onlytext: false
      };
      this.menu = new Ractive({
        el: 'menu',
        template: '#editor-menu',
        data: {
          panels: this.panels
        }
      });
      this.menu.on({
        'help': (function(_this) {
          return function(event) {
            _this.panels.help = !_this.panels.help;
            _this.sidebar.set('help_visible', _this.panels.help);
            _this.menu.set('panels', _this.panels);
            return viewer.update_minimap();
          };
        })(this),
        'create': (function(_this) {
          return function() {
            return win.editor.create();
          };
        })(this),
        'fork': (function(_this) {
          return function() {
            return alert('TODO: fork');
          };
        })(this),
        'import': (function(_this) {
          return function() {
            return $('#import-window').modal('toggle');
          };
        })(this),
        'export': (function(_this) {
          return function() {
            return $('#export-window').modal('toggle');
          };
        })(this),
        'save': (function(_this) {
          return function() {
            return alert('TODO: save');
          };
        })(this),
        'print': (function(_this) {
          return function() {
            return win.editor.print();
          };
        })(this),
        'save1': (function(_this) {
          return function() {
            return _this.editor.fire('save');
          };
        })(this),
        'load1': (function(_this) {
          return function() {
            return _this.editor.fire('load');
          };
        })(this),
        'undo': (function(_this) {
          return function() {
            return _this.editor.fire('undo');
          };
        })(this),
        'redo': (function(_this) {
          return function() {
            return _this.editor.fire('redo');
          };
        })(this),
        'cut': (function(_this) {
          return function() {
            return win.editor.select();
          };
        })(this),
        'paste': (function(_this) {
          return function() {
            return win.editor.move_into();
          };
        })(this),
        'insert-image': (function(_this) {
          return function() {
            return win.editor.media_form(true);
          };
        })(this),
        'insert-link': (function(_this) {
          return function() {
            return win.editor.link_form();
          };
        })(this),
        'relation': (function(_this) {
          return function() {
            return alert('TODO: relation');
          };
        })(this),
        'element': (function(_this) {
          return function() {
            return alert('TODO: element');
          };
        })(this),
        'delete': (function(_this) {
          return function() {
            return alert('TODO: delete');
          };
        })(this),
        'redraw-this': (function(_this) {
          return function() {
            return win.editor.update_this();
          };
        })(this),
        'redraw-all': (function(_this) {
          return function() {
            return win.editor.update_all();
          };
        })(this),
        'fit-all': (function(_this) {
          return function() {
            return win.editor.focus_all();
          };
        })(this),
        'fit-this': (function(_this) {
          return function() {
            return win.editor.focus_this();
          };
        })(this),
        'zoom-in': (function(_this) {
          return function() {
            return win.viewer.controls.fire('zoom-in');
          };
        })(this),
        'zoom-out': (function(_this) {
          return function() {
            return win.viewer.controls.fire('zoom-out');
          };
        })(this),
        'toggle-tree': (function(_this) {
          return function() {
            _this.panels.tree = !_this.panels.tree;
            _this.editor.set('tree_visible', _this.panels.tree);
            _this.menu.set('panels', _this.panels);
            return viewer.update_minimap();
          };
        })(this),
        'toggle-storyboard': (function(_this) {
          return function() {
            _this.panels.storyboard = !_this.panels.storyboard;
            _this.sidebar.set('storyboard_visible', _this.panels.storyboard);
            _this.menu.set('panels', _this.panels);
            return viewer.update_minimap();
          };
        })(this),
        'toggle-onlytext': (function(_this) {
          return function() {
            _this.panels.onlytext = !_this.panels.onlytext;
            _this.editor.set('onlytext_visible', _this.panels.onlytext);
            return _this.menu.set('panels', _this.panels);
          };
        })(this),
        'show-link': (function(_this) {
          return function() {
            return alert('TODO: show link');
          };
        })(this),
        'embed': (function(_this) {
          return function() {
            return alert('TODO: embed');
          };
        })(this),
        'share-fb': (function(_this) {
          return function() {
            return alert('TODO: Facebook');
          };
        })(this),
        'share-vk': (function(_this) {
          return function() {
            return alert('TODO: VK');
          };
        })(this),
        'share-tw': (function(_this) {
          return function() {
            return alert('TODO: Twitter');
          };
        })(this),
        'co-authors': (function(_this) {
          return function() {
            return alert('TODO: co-authors');
          };
        })(this)
      });
    }

    return EditorMenu;

  })();
  return win.Editor = (function() {
    function Editor(system) {
      this.children_of = bind(this.children_of, this);
      this.system = system;
      this.extend_ractive();
      this.init_history();
      this.build_content();
      this.controller();
    }

    Editor.prototype.Settings = {
      maxLevel: 7
    };

    Editor.prototype.extend_ractive = function() {
      var inputFocusDecorator, sliderDecorator, sortableDecorator;
      sortableDecorator = (function(_this) {
        return function(node, elements_arr) {
          var from;
          from = 0;
          $(node).sortable({
            distance: 10,
            start: function(event, ui) {
              return from = ui.item.index();
            },
            stop: function(event, ui) {
              var id, m, model, to;
              to = ui.item.index();
              m = elements_arr[from];
              elements_arr.splice(from, 1);
              elements_arr.splice(to, 0, m);
              id = _this.editor.get('id');
              model = _this.system[id];
              return model.matrix = _this.rebuild_matrix();
            }
          });
          return {
            teardown: function() {
              return $(node).sortable('destroy');
            }
          };
        };
      })(this);
      Ractive.decorators.sortable = sortableDecorator;
      sliderDecorator = (function(_this) {
        return function(node, scale, disabled) {
          var save_val;
          if (scale > 0) {
            scale = (scale - 0.1) / 9.9;
            scale = Math.log(scale * 9 + 1) / Math.LN10;
          } else {
            scale = 0;
          }
          save_val = function(event, ui) {
            var s, x;
            x = $(node).slider('value');
            s = (Math.pow(10, x) - 1) / 9;
            s = (s * 9.9 + 0.1).toFixed(1);
            return _this.editor.set('imgscale', s);
          };
          $(node).slider({
            min: 0,
            max: 1,
            step: 0.01,
            value: scale,
            slide: save_val,
            stop: function() {
              save_val();
              return _this.update_this();
            },
            disabled: disabled
          });
          $(node).find('.ui-slider-handle').attr('title', 'Масштабировать перед отрисовкой');
          return {
            teardown: function() {}
          };
        };
      })(this);
      Ractive.decorators.slider = sliderDecorator;
      inputFocusDecorator = (function(_this) {
        return function(node, changed) {
          if (changed) {
            node.focus();
          }
          return {
            teardown: function() {}
          };
        };
      })(this);
      return Ractive.decorators.focus = inputFocusDecorator;
    };

    Editor.prototype.init_history = function() {
      return this.history = {
        stack: [],
        limit: 10,
        pos: -1,
        save: function(state) {
          if (this.is_redo()) {
            this.stack.splice(this.pos + 1, this.stack.length - this.pos - 1);
          }
          if (this.stack.length === this.limit) {
            this.stack.shift();
          }
          this.stack.push(state);
          return this.pos = this.stack.length - 1;
        },
        undo: function() {
          this.pos--;
          return this.stack[this.pos + 1];
        },
        redo: function() {
          this.pos++;
          return this.stack[this.pos];
        },
        is_undo: function() {
          return this.pos >= 0;
        },
        is_redo: function() {
          return this.pos < this.stack.length - 1;
        }
      };
    };

    Editor.prototype.build_content = function() {
      var the_menu;
      this.editor = new Ractive({
        el: 'modeller',
        template: '#modelling-form',
        data: {
          search: '',
          theme: Theme,
          themes: Themes,
          tree_visible: true,
          onlytext_visible: false
        }
      });
      this.sidebar = new Ractive({
        el: 'sidebar',
        template: '#sidebar-panels',
        data: {
          help_visible: false,
          storyboard_visible: false
        }
      });
      the_menu = new EditorMenu(this.editor, this.sidebar);
      this.panels = the_menu.panels;
      this.menu = the_menu.menu;
      this.controls = win.viewer.controls;
      this.images = {};
      this.external_links = {};
      this.search_query = '';
      this.filtered = [];
      this.selected = null;
      return $('#form').draggable({
        containment: '#wrapper',
        cursor: 'move',
        opacity: 0.8
      });
    };

    Editor.prototype.controller = function() {
      var autosave, dropZone;
      $win.on('keydown.editor', (function(_this) {
        return function(e) {
          var b, child, el, id, parent, ref, sibling;
          if (e.which === $.key.Esc) {
            $('.modal:visible').modal('hide');
          }
          if (e.which === $.key.Shift) {
            $('#wrapper').addClass('edit');
          }
          if (e.altKey && e.shiftKey) {
            switch (e.which) {
              case $.key.n1:
                _this.editor.fire('change-struct', null, 'list.inline');
                return false;
              case $.key.n2:
                _this.editor.fire('change-struct', null, 'list.stack');
                return false;
              case $.key.n3:
                _this.editor.fire('change-struct', null, 'list.bricks');
                return false;
              case $.key.n4:
                _this.editor.fire('change-struct', null, 'matrix');
                return false;
              case $.key.n5:
                _this.editor.fire('change-struct', null, 'graph');
                return false;
            }
          } else if ((e.ctrlKey || e.metaKey) && !e.altKey) {
            switch (e.which) {
              case $.key.Enter:
                parent = _this.editor.get('parent');
                id = _this.editor.get('id');
                if (parent) {
                  _this.write_history(id);
                  sibling = _this.system[id].create_sibling_before();
                  _this.redraw(parent, true);
                  _this.show(sibling);
                  _this.edit_title();
                }
                return false;
              case $.key.Up:
                _this.move_level_higher();
                return false;
              case $.key.Down:
                _this.move_level_lower();
                return false;
              case $.key.Slash:
              case $.key.Slash_cyr:
              case $.key.Slash_num:
                _this.panels.help = !_this.panels.help;
                _this.sidebar.set('help_visible', _this.panels.help);
                _this.menu.set('panels', _this.panels);
                viewer.update_minimap();
                return false;
              case $.key.S:
                _this.editor.fire('save');
                return false;
              case $.key.L:
                _this.editor.fire('load');
                return false;
            }
          } else if (e.shiftKey) {
            switch (e.which) {
              case $.key.Enter:
                parent = _this.editor.get('parent');
                id = _this.editor.get('id');
                if (parent) {
                  _this.write_history(id);
                  sibling = _this.system[id].create_sibling_after();
                  _this.redraw(parent, true);
                  _this.show(sibling);
                  _this.edit_title();
                }
                return false;
              case $.key.Ins:
                _this.editor.fire('add-element', null, $.selection());
                return false;
            }
          } else if (e.altKey) {
            switch (e.which) {
              case $.key.T:
                _this.panels.tree = !_this.panels.tree;
                _this.editor.set('tree_visible', _this.panels.tree);
                _this.menu.set('panels', _this.panels);
                viewer.update_minimap();
                return false;
              case $.key.S:
                _this.panels.onlytext = !_this.panels.onlytext;
                _this.editor.set('onlytext_visible', _this.panels.onlytext);
                _this.menu.set('panels', _this.panels);
                return false;
              case $.key.R:
                _this.update_this();
                return false;
              case $.key.A:
                _this.update_all();
                return false;
              case $.key.F:
                _this.focus_this();
                return false;
              case $.key.V:
                el = _this.editor.get('id');
                win.viewer.find_and_pan(el);
                return false;
            }
          } else {
            switch (e.which) {
              case $.key.Ins:
                _this.editor.fire('add-element');
                return false;
            }
          }
          if (!$.activeInput()) {
            if ((e.ctrlKey || e.metaKey) && !e.altKey) {
              switch (e.which) {
                case $.key.Left:
                  _this.move_same_level(-1);
                  return false;
                case $.key.Right:
                  _this.move_same_level(+1);
                  return false;
                case $.key.Z:
                  _this.editor.fire('undo');
                  return false;
                case $.key.Y:
                  _this.editor.fire('redo');
                  return false;
                case $.key.X:
                  _this.select();
                  return false;
                case $.key.V:
                  _this.move_into();
                  return false;
              }
            } else if (!(e.altKey || e.ctrlKey || e.metaKey || e.shiftKey)) {
              switch (e.which) {
                case $.key.Up:
                case $.key.K:
                  _this.change_current(-1);
                  return false;
                case $.key.Down:
                case $.key.J:
                  _this.change_current(+1);
                  return false;
                case $.key.Left:
                case $.key.H:
                  parent = _this.editor.get('parent');
                  if (parent) {
                    _this.show(parent);
                  }
                  return false;
                case $.key.Right:
                case $.key.L:
                  child = _this.editor.get('elements.0.link');
                  if (child) {
                    _this.show(child);
                  }
                  return false;
                case $.key.S:
                  $('button[data-target="#edit-structure"]:not(.active):not(.disabled)').click();
                  b = $('#model-structure-type button.active + button');
                  if (b[0]) {
                    b.click();
                  } else {
                    $('#model-structure-type button:first').click();
                  }
                  return false;
                case $.key.I:
                  _this.media_form();
                  return false;
                case $.key.U:
                  _this.link_form();
                  return false;
                case $.key.R:
                  $('#tie-with').dropdown('toggle');
                  return false;
                case $.key.Enter:
                  if ((ref = doc.activeElement.tagName) === "BUTTON" || ref === "A") {
                    return true;
                  }
                  _this.edit_title();
                  return false;
                case $.key.Space:
                  $('#model-description').focus().select();
                  return false;
                case $.key.Del:
                  _this.editor.fire('remove');
                  return false;
                case $.key.F:
                case $.key.Star_num:
                  _this.editor.fire('toggle-featured');
                  return false;
                case $.key.Slash:
                case $.key.Slash_cyr:
                case $.key.Slash_num:
                  $('#search input').focus().select();
                  return false;
                case $.key.n5_num:
                  el = win.viewer.in_center();
                  _this.show_edit(el);
                  return false;
              }
            }
          } else {
            if (e.which === $.key.Esc) {
              doc.activeElement.blur();
            }
          }
          if (e.which === $.key.Esc) {
            _this.editor.fire('hide-editor');
          }
          return true;
        };
      })(this));
      $win.on('keyup.editor', (function(_this) {
        return function(e) {
          if (e.which === $.key.Shift) {
            $('#wrapper').removeClass('edit');
          }
          return true;
        };
      })(this));
      $("#systemtext").on('keydown.simpleeditor', (function(_this) {
        return function(e) {
          var breaks, i, ins, k, len1, line, lines_end, lines_start, m, nbr, ref, sel_end, sel_start, t, ta, text;
          ta = e.target;
          if ((ref = e.which) === $.key.Enter || ref === $.key.Tab) {
            e.preventDefault();
            sel_start = ta.selectionStart;
            sel_end = ta.selectionEnd;
            text = $(ta).val();
            lines_start = text.lastIndexOf("\n", sel_start - 1);
          }
          if (e.which === $.key.Tab) {
            if (sel_start <= sel_end) {
              lines_end = text.indexOf("\n", sel_end - 1);
              if (lines_end < sel_end) {
                lines_end = sel_end;
              }
              breaks = text.substring(lines_start + 1, lines_end).split("\n");
              nbr = 0;
              if (e.shiftKey) {
                for (i = k = 0, len1 = breaks.length; k < len1; i = ++k) {
                  line = breaks[i];
                  if (line.match(/^\s\s/g)) {
                    breaks[i] = line.substring(2, line.length);
                    nbr += 2;
                  }
                }
                ins = breaks.join("\n");
              } else {
                ins = "  " + breaks.join("\n  ");
                nbr = breaks.length * 2;
              }
              $(ta).val(text.substring(0, lines_start + 1) + ins + text.substring(lines_end, text.length));
              ta.selectionStart = e.shiftKey ? sel_start - Math.min(2, nbr) : sel_start + Math.min(2, nbr);
              ta.selectionEnd = e.shiftKey ? sel_end - nbr : sel_end + nbr;
            }
          } else if (e.which === $.key.Enter) {
            ins = '\n';
            t = text.substring(lines_start + 1, sel_start);
            m = t.match(/^[\s\-]*/g);
            if (m && m[0]) {
              ins += m[0];
            }
            $(ta).val(text.substring(0, sel_start) + ins + text.substring(sel_start, text.length));
            ta.selectionStart = sel_start + ins.length;
            ta.selectionEnd = sel_end + ins.length;
          }
          return _this.editor.set('systemtext', $(ta).val());
        };
      })(this));
      $win.off('dblclick.viewer');
      $win.on('dblclick.editor', (function(_this) {
        return function(e) {
          var el;
          el = $(e.target).closest('g').data('model');
          if (el) {
            _this.show(el);
          }
          return false;
        };
      })(this));
      $('#wrapper').on('mousedown.editor', (function(_this) {
        return function(e) {
          var el;
          $.clearSelection();
          if (e.shiftKey) {
            el = $(e.target).closest('g').data('model');
            if (el) {
              _this.show_edit(el);
            }
            return false;
          }
        };
      })(this));
      $('#export-window').on('show.bs.modal', (function(_this) {
        return function(e) {
          var json, renderer;
          json = _this.system.serialize();
          $('pre.exported-json').text(json);
          renderer = new TEXTrender({
            model: _this.system
          });
          $('pre.exported-text').text(renderer.render());
          renderer = new HTMLrender({
            model: _this.system
          });
          $('div.exported-html').html(renderer.render());
          renderer = new XMLrender({
            model: _this.system
          });
          return $('pre.exported-xml').text(renderer.render());
        };
      })(this));
      $('#export-window').on('shown.bs.modal', (function(_this) {
        return function(e) {
          var json;
          json = $('pre.exported-json').clone();
          $('#export-preview').attr('data-type', 'application/json').attr('data-ext', 'json').empty().append(json);
          $.selectContents('export-preview');
          return $('#export-window a[data-toggle=tab]:first').tab('show');
        };
      })(this));
      $('#export-window a[data-toggle=tab]').on('show.bs.tab', (function(_this) {
        return function(e) {
          var el, exported, ext, id, type;
          id = $(e.target).attr('aria-controls');
          el = $('#' + id);
          type = el.attr('data-type');
          ext = el.attr('data-ext');
          exported = el.html();
          $('#export-preview').attr('data-type', type).attr('data-ext', ext).html(exported);
          return $.selectContents('export-preview');
        };
      })(this));
      $('#model-addons .collapse').on('show.bs.collapse', (function(_this) {
        return function(e) {
          var btn, id;
          id = $(e.target).attr('id');
          btn = $('button[data-target=#' + id + ']');
          btn.addClass('active');
          return $('#model-addons button[data-toggle=collapse]').each(function(i, el) {
            var target;
            target = $(el).attr('data-target');
            if (target !== '#' + id && $(target).is(':visible')) {
              return $(target).collapse('hide');
            }
          });
        };
      })(this));
      $('#model-addons .collapse').on('hidden.bs.collapse', (function(_this) {
        return function(e) {
          var btn, id;
          id = $(e.target).attr('id');
          btn = $('button[data-target=#' + id + ']');
          btn.removeClass('active');
          return $(e.target).find('input').blur();
        };
      })(this));
      this.sidebar.on({
        'close-help': (function(_this) {
          return function() {
            _this.panels.help = false;
            _this.sidebar.set('help_visible', _this.panels.help);
            _this.menu.set('panels', _this.panels);
            return viewer.update_minimap();
          };
        })(this),
        'close-storyboard': (function(_this) {
          return function() {
            _this.panels.storyboard = false;
            _this.sidebar.set('storyboard_visible', _this.panels.storyboard);
            _this.menu.set('panels', _this.panels);
            return viewer.update_minimap();
          };
        })(this)
      });
      this.editor.on({
        'clear-search': (function(_this) {
          return function() {
            return _this.editor.set('search', '');
          };
        })(this),
        'show-search-results': (function(_this) {
          return function(e) {
            var ref;
            if ((ref = e.original.which) === $.key.Down || ref === $.key.Enter) {
              $('#filter-dropdown').dropdown('toggle');
              return false;
            }
          };
        })(this),
        'goto': (function(_this) {
          return function(event, zoom) {
            var data;
            data = event.context;
            _this.redraw(data.link, true);
            _this.show(data.link);
            if (zoom) {
              _this.focus_this();
            }
            event.original.preventDefault();
            return false;
          };
        })(this),
        'hide-editor': function() {
          return $('#form').css({
            display: 'none'
          });
        },
        'clear-picture': (function(_this) {
          return function(event, mediastate) {
            if (mediastate === 'error') {
              return _this.editor.set({
                mediaurl: '',
                imgpos: '',
                imgsize: ''
              });
            }
          };
        })(this),
        'set-scale': (function(_this) {
          return function(event, value) {
            _this.editor.set('imgscale', value);
            return _this.update_this();
          };
        })(this),
        'change-struct': (function(_this) {
          return function(event, value) {
            _this.editor.set('structure', value);
            return _this.update_this();
          };
        })(this),
        'change-imgpos': (function(_this) {
          return function(event, value) {
            _this.editor.set('imgpos', value);
            _this.save(event.context);
            return _this.redraw(event.context.id);
          };
        })(this),
        'change-linkpos': (function(_this) {
          return function(event, value) {
            _this.editor.set('linkpos', value);
            _this.save(event.context);
            return _this.redraw(event.context.id);
          };
        })(this),
        'toggle-featured': (function(_this) {
          return function() {
            var f;
            f = _this.editor.get('featured');
            return _this.editor.set('featured', !f);
          };
        })(this),
        'add-element': (function(_this) {
          return function(event, title) {
            var child, hierarchy, id;
            hierarchy = _this.editor.get('hierarchy');
            if (hierarchy.length >= _this.Settings.maxLevel) {
              return;
            }
            id = _this.editor.get('id');
            _this.write_history(id);
            child = _this.system[id].create_child(null, title);
            _this.redraw(id, true);
            _this.show(child);
            _this.edit_title();
            return false;
          };
        })(this),
        'add-relation': (function(_this) {
          return function(event) {
            var id, id1, id2, relation;
            id = event.context.id;
            _this.write_history(id);
            id1 = event.context.rel_from;
            id2 = event.context.rel_to;
            relation = _this.system[id].create_relation(id1, id2);
            _this.redraw(id, true);
            _this.show(relation);
            _this.edit_title();
            return false;
          };
        })(this),
        'tie-with': (function(_this) {
          return function(event) {
            var id, parent, relation, target;
            target = event.context;
            id = _this.editor.get('id');
            parent = _this.editor.get('parent');
            relation = _this.system[parent].create_relation(id, target.link);
            _this.redraw(parent, true);
            _this.show(relation);
            _this.edit_title();
            return true;
          };
        })(this),
        'rel-dir-inverse': (function(_this) {
          return function(event) {
            var id1, id2;
            id1 = event.context.rel_from;
            id2 = event.context.rel_to;
            return _this.editor.set({
              rel_from: id2,
              rel_to: id1
            });
          };
        })(this),
        'swap-on': (function(_this) {
          return function(event) {
            return $(event.node).children('i').removeClass('fa-long-arrow-right').addClass('fa-arrows-h text-info');
          };
        })(this),
        'swap-off': (function(_this) {
          return function(event) {
            return $(event.node).children('i').removeClass('fa-arrows-h text-info').addClass('fa-long-arrow-right');
          };
        })(this),
        'save': (function(_this) {
          return function(event) {
            var data;
            data = _this.editor.get();
            _this.save(data);
            _this.system.save();
            return false;
          };
        })(this),
        'load': (function(_this) {
          return function(event) {
            _this.system.reload();
            _this.edit(_this.system.root);
            _this.update_all();
            return false;
          };
        })(this),
        'remove': (function(_this) {
          return function(event) {
            _this.remove(_this.editor.get());
            return false;
          };
        })(this),
        'undo': (function(_this) {
          return function() {
            var state;
            if (!_this.history.is_undo()) {
              return;
            }
            state = _this.history.undo();
            _this.system.deserialize(state.data);
            _this.update(state.id);
            return _this.menu.set({
              is_undo: _this.history.is_undo(),
              is_redo: _this.history.is_redo()
            });
          };
        })(this),
        'redo': (function(_this) {
          return function() {
            var state;
            if (!_this.history.is_redo()) {
              return;
            }
            state = _this.history.redo();
            _this.system.deserialize(state.data);
            _this.update(state.id);
            return _this.menu.set({
              is_undo: _this.history.is_undo(),
              is_redo: _this.history.is_redo()
            });
          };
        })(this),
        'exportSVG': (function(_this) {
          return function() {
            var bbox, data, filename, svg_file;
            filename = _this.model_name();
            _this.editor.set('exportingSVG', true);
            win.viewer.zoom(1);
            bbox = win.modelview.object.bbox();
            svg_file = win.modelview.draw.exportSvg({
              width: bbox.width,
              height: bbox.height,
              exclude: function() {
                if (this.type === 'text') {
                  this.show();
                }
                return this.type === 'rect' && (this.hasClass('mask') || this.hasClass('frame'));
              }
            });
            data = new Blob([svg_file], {
              "type": "text\/xml"
            });
            _this.export_file(filename + '.svg', data);
            _this.update_all();
            _this.editor.set('exportingSVG', false);
            return false;
          };
        })(this),
        'exportPNG': (function(_this) {
          return function() {
            var bbox, filename, h, image, overzoom, svg_file, w;
            filename = _this.model_name();
            _this.editor.set('exportingPNG', true);
            win.viewer.zoom(1);
            bbox = win.modelview.object.bbox();
            overzoom = 8000 / Math.max(bbox.width, bbox.height, bbox.x2, bbox.y2);
            if (overzoom < 1) {
              win.viewer.zoom(overzoom);
              bbox = win.modelview.object.bbox();
            }
            w = Math.round(Math.max(bbox.width, bbox.x2));
            h = Math.round(Math.max(bbox.height, bbox.y2));
            svg_file = win.modelview.draw.exportSvg({
              width: w,
              height: h,
              exclude: function() {
                if (this.type === 'text') {
                  this.show();
                }
                return this.type === 'rect' && (this.hasClass('mask') || this.hasClass('frame'));
              }
            });
            image = new Image;
            image.onload = function() {
              var a, canvas, png, url;
              canvas = $('<canvas>').appendTo('body').hide()[0];
              canvas.width = w;
              canvas.height = h;
              png = canvas.getContext("2d");
              png.fillStyle = '#FFFFFF';
              png.fillRect(0, 0, canvas.width, canvas.height);
              png.drawImage(image, 0, 0);
              url = canvas.toDataURL("image/png");
              a = $('<a>').attr('download', filename + ".png").attr('href', url);
              a[0].click();
              _this.editor.set('exportingPNG', false);
              return _this.update_all();
            };
            image.src = 'data:image/svg+xml;utf8,' + svg_file;
            return false;
          };
        })(this),
        'exportFile': (function(_this) {
          return function() {
            var content, data, ext, filename, get_html, type;
            filename = _this.model_name();
            type = $('#export-preview').attr('data-type');
            ext = $('#export-preview').attr('data-ext');
            get_html = function() {
              var t;
              t = '<!DOCTYPE html><html><head><title>' + $.escape(filename) + '</title></head><body>';
              t += $('#export-preview>div').html();
              return t + '</body></html>';
            };
            content = $('#export-preview>pre').text() || get_html();
            data = new Blob([content], {
              "type": type
            });
            _this.export_file(filename + '.' + ext, data);
            return false;
          };
        })(this),
        'exportJSON': (function(_this) {
          return function() {
            var data, filename, json;
            filename = _this.model_name();
            json = _this.system.serialize();
            data = new Blob([json], {
              "type": "application\/json"
            });
            _this.export_file(filename + '.json', data);
            return false;
          };
        })(this),
        'importJSON': (function(_this) {
          return function(event) {
            var file;
            file = event.node.files[0];
            if (file && file.size < 100000) {
              _this.import_json(file);
              $('#import-window').modal('toggle');
            }
            return false;
          };
        })(this)
      });
      this.editor.observe({
        'onlytext_visible': (function(_this) {
          return function(value) {
            var renderer;
            if (value) {
              renderer = new TEXTrender({
                model: _this.system
              });
              return _this.editor.set('systemtext', renderer.render());
            }
          };
        })(this),
        'systemtext': (function(_this) {
          return function(text) {
            var importer;
            if (text) {
              importer = new TEXTreader({
                text: text
              });
              _this.system = importer.read();
              _this.edit(_this.system.root);
              return _this.update_all();
            }
          };
        })(this),
        'theme': (function(_this) {
          return function(theme) {
            if (theme !== win.Theme) {
              win.Theme = theme;
              $('#wrapper').css({
                backgroundColor: theme.color.background
              });
              return _this.update_all();
            }
          };
        })(this),
        'search': (function(_this) {
          return function(query) {
            return _this.search(query);
          };
        })(this),
        'mediaurl': (function(_this) {
          return function(url) {
            var pos;
            _this.editor.set('mediastate', '');
            if (_this.timer_check_media) {
              clearTimeout(_this.timer_check_media);
            }
            _this.timer_check_media = setTimeout(function() {
              _this.check_media(url);
              return _this.timer_check_media = null;
            }, 500);
            if (url) {
              pos = _this.editor.get('imgpos');
              if (!pos) {
                return _this.editor.set('imgpos', 'above.desc');
              }
            } else {
              return _this.editor.set('imgpos', '');
            }
          };
        })(this),
        'link': (function(_this) {
          return function(url) {
            var pos;
            if (!url) {
              return;
            }
            if (!url.match(/^(\w+\:|\/)/gi)) {
              _this.editor.set('link', 'http://' + url);
            }
            pos = _this.editor.get('linkpos');
            if (!pos) {
              return _this.editor.set('linkpos', 'title');
            }
          };
        })(this),
        'rel_from': (function(_this) {
          return function(link) {
            var to;
            to = _this.editor.get('rel_to');
            if (link === to) {
              return _this.editor.set('rel_to', '');
            }
          };
        })(this),
        'title description mediastate link linkstate featured  systemtext': (function(_this) {
          return function() {
            var data;
            data = _this.editor.get();
            if (_this.timer_data_update) {
              clearTimeout(_this.timer_data_update);
            }
            return _this.timer_data_update = setTimeout(function() {
              var new_data;
              new_data = _this.editor.get();
              if (new_data.id !== data.id) {
                _this.save(data);
              } else {
                _this.save(new_data);
                _this.redraw(new_data.id);
              }
              return _this.timer_data_update = null;
            }, 500);
          };
        })(this)
      });
      autosave = setInterval((function(_this) {
        return function() {
          _this.system.save('autosave');
          return _this.save_settings();
        };
      })(this), 10000);
      dropZone = $('#wrapper');
      return dropZone.on('dragover', function(e) {
        e.preventDefault();
        dropZone.addClass('fileover');
        return false;
      }).on('dragleave', function(e) {
        e.preventDefault();
        dropZone.removeClass('fileover');
        return false;
      }).on('drop', (function(_this) {
        return function(e) {
          var file;
          e.preventDefault();
          dropZone.removeClass('fileover');
          file = e.originalEvent.dataTransfer.files[0];
          if (file && file.size < 100000) {
            _this.import_json(file);
          }
          return false;
        };
      })(this));
    };

    Editor.prototype.print = function() {
      win.viewer.zoom(Theme.maxzoom);
      win.print();
      return this.update_all();
    };

    Editor.prototype.import_json = function(file) {
      var reader;
      reader = new FileReader();
      reader.onload = (function(_this) {
        return function(e) {
          var data;
          data = e.target.result;
          _this.system.deserialize(data);
          _this.edit(_this.system.root);
          _this.update_all();
          return reader = null;
        };
      })(this);
      return reader.readAsText(file);
    };

    Editor.prototype.media_form = function(f) {
      $('button[data-target="#insert-media"]' + (f ? ':not(.active)' : '')).click();
      return $('#model-image').focus().select();
    };

    Editor.prototype.video_provider = function(url) {
      var id, m, v;
      v = {
        video: null,
        preview: null
      };
      if (m = url.match(/(?:https?\:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com(?:\/embed\/|\/v\/|\/watch\?v=|\/watch\?.+&v=))([\w-]{11})/i)) {
        id = m[1];
        v.preview = 'http://i.ytimg.com/vi/' + id + '/hqdefault.jpg';
        v.video = '<iframe src="//www.youtube.com/embed/' + id + '" width="420" height="315" frameborder="0" allowfullscreen></iframe>';
      } else if (m = url.match(/(?:https?\:\/\/)?(?:\w+.)?vimeo\.com\/(?:video\/|moogaloop\.swf\?clip_id=)?(\w+)/i)) {
        id = m[1];
        v.preview = 'http://i.vimeocdn.com/video/' + id + '_640.jpg';
        v.video = '<iframe src="//player.vimeo.com/video/' + id + '?color=ffffff" width="500" height="281" frameborder="0" allowfullscreen></iframe>';
      } else if (m = url.match(/(?:https?\:\/\/)?(?:www\.)?dailymotion\.com\/(?:embed\/)?video\/([^_#\?]+)/i)) {
        id = m[1];
        v.preview = 'http://s2.dmcdn.net//GmQgw//x240-AbD.jpg';
        v.video = '<iframe src="//www.dailymotion.com/embed/video/' + id + '" width="480" height="270" frameborder="0" allowfullscreen></iframe>';
      }
      return v;
    };

    Editor.prototype.check_video = function(url) {
      var dfrd, v;
      dfrd = $.Deferred();
      v = this.video_provider(url);
      if (v.video) {
        this.editor.set({
          preview: v.preview,
          video: v.video
        });
      } else {
        this.editor.set({
          preview: null,
          video: null
        });
        dfrd.reject();
        return dfrd;
      }
      this.load_picture(v.preview, (function(_this) {
        return function() {
          _this.editor.set({
            mediastate: 'success'
          });
          _this.show_media_preview(true);
          return dfrd.resolve();
        };
      })(this), (function(_this) {
        return function() {
          _this.editor.set({
            mediastate: 'warning'
          });
          _this.media_preview_error();
          return dfrd.resolve();
        };
      })(this));
      return dfrd;
    };

    Editor.prototype.check_image = function(url) {
      return this.load_picture(url, (function(_this) {
        return function() {
          _this.editor.set({
            mediastate: 'success'
          });
          return _this.show_media_preview();
        };
      })(this), (function(_this) {
        return function() {
          _this.editor.set({
            mediastate: 'error'
          });
          return _this.media_preview_error();
        };
      })(this));
    };

    Editor.prototype.check_media = function(url) {
      this.hide_media_preview();
      if (!url) {
        this.editor.set({
          mediastate: ''
        });
        return;
      }
      return this.check_video(url).fail((function(_this) {
        return function() {
          return _this.check_image(url);
        };
      })(this));
    };

    Editor.prototype.load_picture = function(url, do_success, do_fail) {
      var image_tag, imgscale;
      if (this.images[url] && this.images[url].img) {
        do_success();
        return;
      }
      image_tag = $('<img src="' + url + '" style="visibility:hidden;">');
      image_tag.appendTo('#cache');
      imgscale = this.editor.get('imgscale') || 1;
      this.media_preview_loading();
      image_tag.on('load', (function(_this) {
        return function() {
          _this.images[url] = {
            img: image_tag,
            size: image_tag.width() + 'x' + image_tag.height()
          };
          image_tag.hide();
          _this.editor.set({
            imgsize: _this.images[url].size,
            imgscale: imgscale
          });
          return do_success();
        };
      })(this));
      return image_tag.on('error', (function(_this) {
        return function() {
          _this.images[url] = {
            img: null,
            size: null
          };
          image_tag.hide();
          _this.editor.set({
            imgsize: '',
            imgscale: imgscale
          });
          return do_fail();
        };
      })(this));
    };

    Editor.prototype.show_media_preview = function(is_video) {
      var img, play_btn, url;
      url = this.editor.get(is_video ? 'preview' : 'mediaurl');
      if (this.images[url] && this.images[url].img) {
        img = this.images[url].img;
        $('#picture-preview').empty().append(img);
        img.show().css('visibility', 'visible');
      }
      if (is_video) {
        play_btn = $('<div class="play"><i class="fa fa-5x fa-play"></i></div>').on('click', (function(_this) {
          return function() {
            return $('#video-preview').modal('toggle');
          };
        })(this));
        return $('#picture-preview').append(play_btn);
      }
    };

    Editor.prototype.hide_media_preview = function() {
      var img;
      img = $('#picture-preview').find('img');
      img.css('visibility', 'hidden').hide().appendTo('#cache');
      return $('#picture-preview').html('<i class="fa fa-image fa-5x text-muted"></i>');
    };

    Editor.prototype.media_preview_loading = function() {
      return $('#picture-preview').html('<i class="fa fa-circle-o-notch fa-spin fa-2x text-muted"></i>');
    };

    Editor.prototype.media_preview_error = function() {
      return $('#picture-preview').html('<i class="fa fa-eye-slash fa-5x text-muted"></i>');
    };

    Editor.prototype.link_form = function() {
      $('button[data-target="#insert-link"]').click();
      return $('#model-link').focus().select();
    };

    Editor.prototype.check_link = function(url) {
      if (!url) {
        this.editor.set({
          linkstate: ''
        });
        return;
      }
      if (this.external_links[url]) {
        this.editor.set({
          linkstate: this.external_links[url].valid ? 'success' : 'error'
        });
        return this.external_links[url];
      }
      if (!/^((https?:)?\/\/)?((([a-z\d]([a-z\d-]*[a-z\d])*)\.)+[a-z]{2,}|((\d{1,3}\.){3}\d{1,3}))(\:\d+)?(\/[-a-z\d%_.~+]*)*(\?[,;&a-z\d%_.~+=-]*)?(\#[-a-z\d_]*)?$/.test(url)) {
        this.external_links[url] = {
          valid: false
        };
        this.editor.set({
          linkstate: 'error'
        });
        return;
      }
      return $.ajax({
        type: 'HEAD',
        url: url,
        success: (function(_this) {
          return function() {
            _this.external_links[url] = {
              valid: true
            };
            return _this.editor.set({
              linkstate: 'success'
            });
          };
        })(this),
        error: (function(_this) {
          return function() {
            _this.external_links[url] = {
              valid: false
            };
            return _this.editor.set({
              linkstate: 'error'
            });
          };
        })(this)
      });
    };

    Editor.prototype.edit = function(id) {
      var arr, description, e, editable, elements, from, i, image, imgpos, imgscale, imgsize, is_element, j, k, l, len1, len2, len3, link, linkpos, m, model, n, old, parent, ref, ref1, relations, row, siblings, title, to, videocode, videopreview;
      model = this.system[id];
      if (!model) {
        return;
      }
      old = this.editor.get('id');
      title = model.title || '';
      description = model.description || '';
      if (model.link) {
        link = model.link.url || '';
        linkpos = model.link.pos || 'title';
      } else {
        link = linkpos = '';
      }
      if (model.picture) {
        image = model.picture.url;
        imgsize = model.picture.width > 0 && model.picture.height > 0 ? model.picture.width + 'x' + model.picture.height : '';
        imgpos = model.picture.pos;
        imgscale = model.picture.scale || 1;
        videopreview = model.picture.preview || '';
        videocode = model.picture.video || '';
      } else {
        image = imgsize = imgpos = imgscale = '';
      }
      elements = [];
      relations = [];
      if (model.matrix) {
        ref = model.matrix;
        for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
          row = ref[i];
          from = row[i];
          for (j = l = 0, len2 = row.length; l < len2; j = ++l) {
            m = row[j];
            to = model.matrix[j][j];
            if (m) {
              arr = i === j ? elements : relations;
              arr.push({
                title: this.system[m].nav_title(),
                link: m,
                from: from,
                to: to
              });
            }
          }
        }
      }
      parent = this.system.parent_of(id);
      siblings = parent ? this.children_of(parent) : null;
      is_element = false;
      if (siblings) {
        ref1 = siblings.elements;
        for (n = 0, len3 = ref1.length; n < len3; n++) {
          e = ref1[n];
          if (e.link === id) {
            is_element = true;
            break;
          }
        }
      } else {
        is_element = true;
      }
      editable = {
        id: id,
        is_element: is_element,
        parent: parent,
        siblings: siblings,
        changed: id !== old,
        selected: this.selected,
        title: title,
        description: description,
        mediaurl: image,
        mediastate: this.images[image] ? (this.images[image].img ? 'success' : 'error') : null,
        imgsize: imgsize,
        imgpos: imgpos,
        imgscale: imgscale,
        preview: videopreview,
        video: videocode,
        link: link,
        linkpos: linkpos,
        linkstate: this.external_links[link] ? (this.external_links[link].iframe ? 'success' : 'error') : null,
        featured: model.featured,
        structure: model.structure,
        elements: elements,
        relations: relations
      };
      this.editor.set(editable);
      this.show_hierarchy(id);
      win.modelview.highlight(id);
      this.pos_editor(id);
      if (!this.editor.get('onlytext-visible')) {
        return $('#form').show();
      }
    };

    Editor.prototype.edit_title = function() {
      return $('#model-title').focus().select();
    };

    Editor.prototype.pos_editor = function(id) {
      var el, left, o, top, w;
      el = win.viewer.find(id);
      if (el[0]) {
        o = el.offset();
        w = el[0].getBoundingClientRect().width;
        top = Math.max($('#modeller').offset().top, Math.min(o.top, $('body').height() - $('#form').outerHeight(true)));
        left = Math.min(o.left + w, $('body').width() - $('#form').outerWidth(true));
      } else {
        top = 100;
        left = 0;
      }
      return $('#form').css({
        left: left,
        top: top
      });
    };

    Editor.prototype.redraw = function(id, locate) {
      var current, selected;
      win.modelview.model = this.system;
      win.modelview.redraw(id);
      current = this.editor.get('id');
      win.modelview.highlight(current);
      selected = this.editor.get('selected');
      return win.modelview.select(selected);
    };

    Editor.prototype.update = function(id) {
      if (!id) {
        id = this.editor.get('id');
      }
      this.edit(id);
      return this.redraw(id);
    };

    Editor.prototype.update_this = function() {
      var data;
      data = this.editor.get();
      this.save(data);
      return this.redraw(data.id);
    };

    Editor.prototype.update_all = function() {
      var data;
      data = this.editor.get();
      this.save(data);
      return this.redraw(this.system.root);
    };

    Editor.prototype.focus_this = function() {
      var el;
      el = this.editor.get('id');
      return win.viewer.find_and_zoom(el);
    };

    Editor.prototype.focus_all = function() {
      return win.viewer.find_and_zoom(this.system.root);
    };

    Editor.prototype.show = function(id) {
      $('#tree-' + id).scrollintoview();
      this.edit(id);
      if (win.viewer.is_too_big(id)) {
        return this.focus_this();
      }
    };

    Editor.prototype.show_edit = function(id) {
      $('#tree-' + id).scrollintoview();
      this.edit(id);
      if (win.viewer.is_too_big(id)) {
        this.focus_this();
      }
      return this.edit_title();
    };

    Editor.prototype.remove = function(model) {
      if (model.elements.length === 0 && model.parent) {
        this.system[model.parent].delete_child(model.id);
        win.viewer.find_and_zoom(model.parent);
        return this.edit(model.parent);
      }
    };

    Editor.prototype.children_of = function(el) {
      var arr, children, i, j, k, l, len1, len2, matrix, row;
      matrix = this.system[el].matrix;
      children = {
        elements: [],
        relations: []
      };
      if (matrix) {
        for (i = k = 0, len1 = matrix.length; k < len1; i = ++k) {
          row = matrix[i];
          for (j = l = 0, len2 = row.length; l < len2; j = ++l) {
            el = row[j];
            if (!el) {
              continue;
            }
            arr = i === j ? children.elements : children.relations;
            arr.push({
              title: this.system[el].nav_title(),
              link: el,
              found: indexOf.call(this.filtered, el) >= 0
            });
          }
        }
        return children;
      } else {
        return null;
      }
    };

    Editor.prototype.rebuild_matrix = function() {
      var el, el2, elements, i, j, k, l, len1, len2, len3, len4, len5, n, new_matrix, p, q, r, relations, row;
      elements = this.editor.get('elements');
      if (!elements || elements.length === 0) {
        return null;
      }
      new_matrix = [];
      for (i = k = 0, len1 = elements.length; k < len1; i = ++k) {
        el = elements[i];
        row = [];
        for (j = l = 0, len2 = elements.length; l < len2; j = ++l) {
          el2 = elements[j];
          row.push(i === j ? el.link : null);
        }
        new_matrix.push(row);
      }
      relations = this.editor.get('relations');
      if (relations && relations.length > 0) {
        for (i = n = 0, len3 = elements.length; n < len3; i = ++n) {
          el = elements[i];
          for (j = p = 0, len4 = elements.length; p < len4; j = ++p) {
            el2 = elements[j];
            for (q = 0, len5 = relations.length; q < len5; q++) {
              r = relations[q];
              if (r.from === new_matrix[i][i] && r.to === new_matrix[j][j]) {
                new_matrix[i][j] = r.link;
              }
            }
          }
        }
      }
      return new_matrix;
    };

    Editor.prototype.show_hierarchy = function(id) {
      var add_obj, all_parents, child, hierarchy, parent, tree;
      tree = [];
      add_obj = (function(_this) {
        return function(obj, level) {
          var el, i, j, k, l, len1, len2, matrix, results, row;
          tree.push({
            title: _this.system[obj].nav_title(),
            link: obj,
            level: level,
            found: indexOf.call(_this.filtered, obj) >= 0,
            f: _this.system[obj].featured
          });
          matrix = _this.system[obj].matrix;
          if (matrix) {
            for (i = k = 0, len1 = matrix.length; k < len1; i = ++k) {
              row = matrix[i];
              if (row[i]) {
                add_obj(row[i], level + 1);
              }
            }
            results = [];
            for (i = l = 0, len2 = matrix.length; l < len2; i = ++l) {
              row = matrix[i];
              results.push((function() {
                var len3, n, results1;
                results1 = [];
                for (j = n = 0, len3 = row.length; n < len3; j = ++n) {
                  el = row[j];
                  if (el && i !== j) {
                    results1.push(add_obj(el, level + 1));
                  } else {
                    results1.push(void 0);
                  }
                }
                return results1;
              })());
            }
            return results;
          }
        };
      })(this);
      add_obj(this.system.root, 0);
      hierarchy = [
        {
          title: this.system[id].nav_title(),
          link: id
        }
      ];
      child = id;
      all_parents = false;
      while (!all_parents) {
        parent = this.system.parent_of(child);
        if (parent) {
          hierarchy[0].siblings = this.children_of(parent);
          hierarchy.unshift({
            title: this.system[parent].nav_title(),
            link: parent,
            found: indexOf.call(this.filtered, parent) >= 0
          });
          child = parent;
        } else {
          all_parents = true;
        }
      }
      return this.editor.set({
        system: tree,
        hierarchy: hierarchy
      });
    };

    Editor.prototype.save = function(fields) {
      var data, isize;
      if (!fields) {
        fields = this.editor.get();
      }
      this.write_history(fields.id);
      data = {
        title: fields.title,
        description: fields.description,
        featured: fields.featured
      };
      if (fields.mediastate !== 'error' && fields.mediaurl) {
        isize = fields.imgsize.split('x');
        data.picture = {
          url: fields.mediaurl,
          pos: fields.imgpos,
          width: isize[0],
          height: isize[1],
          scale: fields.imgscale || 1,
          preview: fields.preview || '',
          video: fields.video || ''
        };
      } else if (fields.mediastate === '') {
        data.picture = null;
      }
      if (fields.link) {
        data.link = {
          url: fields.link,
          pos: fields.linkpos
        };
      } else {
        data.link = null;
      }
      if (fields.elements && fields.elements.length > 0) {
        data.structure = fields.structure;
        data.matrix = this.rebuild_matrix();
      } else {
        data.structure = null;
        data.matrix = null;
      }
      $.extend(this.system[fields.id], data);
      return this.show_hierarchy(fields.id);
    };

    Editor.prototype.write_history = function(id) {
      var data;
      data = this.system.serialize();
      this.history.save({
        data: data,
        id: id
      });
      return this.menu.set({
        is_undo: this.history.is_undo(),
        is_redo: this.history.is_redo()
      });
    };

    Editor.prototype.model_name = function() {
      return this.system[this.system.root].nav_title().replace(/\s/gi, '_').replace(/[^a-z0-9_]/gi, '-').toLowerCase();
    };

    Editor.prototype.change_sibling = function(dir) {
      var current, el, el_rel, i, id, k, len, len1, sibling, siblings;
      id = this.editor.get('id');
      len = this.editor.get('hierarchy.length');
      if (len > 0) {
        el_rel = this.editor.get('hierarchy.' + (len - 1) + '.siblings');
        if (!el_rel) {
          return;
        }
        siblings = el_rel.relations ? $.merge(el_rel.elements, el_rel.relations) : el_rel.elements;
        for (current = k = 0, len1 = siblings.length; k < len1; current = ++k) {
          el = siblings[current];
          if (el.link === id) {
            break;
          }
        }
        i = Math.max(0, Math.min(siblings.length - 1, current + dir));
        sibling = siblings[i];
        return this.show(sibling.link);
      }
    };

    Editor.prototype.change_current = function(dir) {
      var S, current, el, i, id, k, len1, other;
      id = this.editor.get('id');
      S = this.editor.get('system');
      for (current = k = 0, len1 = S.length; k < len1; current = ++k) {
        el = S[current];
        if (el.link === id) {
          break;
        }
      }
      i = Math.max(0, Math.min(S.length - 1, current + dir));
      other = S[i];
      return this.show(other.link);
    };

    Editor.prototype.move_level_higher = function() {
      var grand_parent, id, parent;
      parent = this.editor.get('parent');
      if (!parent) {
        return;
      }
      grand_parent = this.system.parent_of(parent);
      if (!grand_parent) {
        return;
      }
      id = this.editor.get('id');
      this.write_history(id);
      this.system[parent].delete_child(id, true);
      this.system[grand_parent].create_child(id);
      this.redraw(grand_parent);
      return this.show(id);
    };

    Editor.prototype.move_level_lower = function() {
      var above, below, id, parent, sibling;
      parent = this.editor.get('parent');
      if (!parent) {
        return;
      }
      id = this.editor.get('id');
      sibling = this.system[parent].next_sibling(id);
      if (!sibling) {
        return;
      }
      above = this.editor.get('hierarchy.length');
      below = this.system.depth_of(id);
      if (above + below >= this.Settings.maxLevel) {
        return;
      }
      this.write_history(id);
      this.system[parent].delete_child(id, true);
      this.system[sibling].create_child(id);
      this.redraw(parent);
      return this.show(id);
    };

    Editor.prototype.move_same_level = function(dir) {
      var id, parent;
      parent = this.editor.get('parent');
      if (!parent) {
        return;
      }
      id = this.editor.get('id');
      this.write_history(id);
      this.system[parent].move_child(id, dir);
      this.redraw(parent);
      return this.show(id);
    };

    Editor.prototype.select = function() {
      var id;
      id = this.editor.get('id');
      if (this.editor.get('parent') && this.editor.get('is_element')) {
        win.modelview.select(id);
        return this.selected = id;
      }
    };

    Editor.prototype.move_into = function() {
      var above, below, parent, target;
      target = this.editor.get('id');
      parent = this.system.parent_of(this.selected);
      if (!parent || parent === target) {
        return;
      }
      above = this.editor.get('hierarchy.length');
      below = this.system.depth_of(this.selected);
      if (above + below >= this.Settings.maxLevel) {
        return;
      }
      this.write_history(target);
      this.system[parent].delete_child(this.selected, true);
      this.system[target].create_child(this.selected);
      this.redraw(parent);
      this.redraw(target);
      this.show(target);
      win.modelview.deselect();
      return this.selected = null;
    };

    Editor.prototype.export_file = function(filename, data) {
      var a, url;
      url = window.URL.createObjectURL(data);
      a = $('<a>').attr('download', filename).attr('href', url);
      a[0].click();
      return setTimeout(function() {
        window.URL.revokeObjectURL(url);
        return a.remove();
      }, 10);
    };

    Editor.prototype.search = function(query) {
      var el, filtered, id, k, len1, ref;
      if (query === '') {
        this.filtered = [];
        this.search_query = '';
        this.editor.set('filtered', []);
        return;
      }
      if (this.search_query !== query) {
        this.search_from = null;
        this.search_query = query;
        this.filtered = this.system.findAll(query);
        filtered = [];
        ref = this.filtered;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          el = ref[k];
          filtered.push({
            link: el,
            title: this.system[el].nav_title()
          });
        }
        this.editor.set('filtered', filtered);
      }
      id = this.system.find(query, this.search_from);
      if (id) {
        this.edit(id);
        this.show(id);
      }
      return this.search_from = id;
    };

    Editor.prototype.load_file = function(data) {
      this.system.deserialize(data);
      this.edit(this.system.root);
      return this.update_all();
    };

    Editor.prototype.create = function() {
      this.system = new S({
        root: 'iSystem',
        iSystem: new A({
          title: 'New system'
        })
      });
      this.edit(this.system.root);
      return this.update_all();
    };

    Editor.prototype.apply_settings = function(settings) {
      var panels;
      panels = settings.panels;
      if (panels) {
        $.extend(this.panels, panels);
        this.sidebar.set({
          help_visible: panels.help,
          storyboard_visible: panels.storyboard
        });
        this.editor.set({
          tree_visible: panels.tree,
          onlytext_visible: panels.onlytext
        });
        this.menu.set('panels', panels);
        return viewer.update_minimap();
      }
    };

    Editor.prototype.load_settings = function() {
      var s, settings;
      s = localStorage.getItem('editor');
      settings = JSON.parse(s);
      if (settings) {
        return this.apply_settings(settings);
      }
    };

    Editor.prototype.save_settings = function() {
      var s, settings;
      settings = {
        panels: this.panels
      };
      s = JSON.stringify(settings);
      return localStorage.setItem('editor', s);
    };

    return Editor;

  })();
})(jQuery, window, document);

//# sourceMappingURL=editor.js.map
