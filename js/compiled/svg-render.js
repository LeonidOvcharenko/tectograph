// Generated by CoffeeScript 1.9.3
"use strict";
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

!(function($, win, doc) {
  var $doc, $win;
  $doc = $(doc);
  $win = $(win);
  win.Render = {
    init: function() {
      return $('<div id="t" />').appendTo('body');
    },
    balance_text: function(text, fs, width) {
      var div, fsn, h1, h2, i, lines, row_length, rows;
      fsn = Theme.minfontsize * 3;
      width = width * fsn / fs;
      fs = fsn;
      text = text.replace(/\n/g, ' ');
      div = $('#t').show();
      div.text(text);
      div.css({
        position: 'absolute',
        visibility: 'hidden',
        width: width + 'px',
        'font-size': fs + 'px',
        'line-height': Theme.lineHeight,
        'white-space': 'normal'
      });
      h1 = div.height();
      div.css({
        width: 'auto',
        'white-space': 'nowrap'
      });
      h2 = div.height();
      rows = Math.round(h1 / h2);
      $('#t').hide();
      row_length = Math.floor(text.length / rows);
      i = 0;
      while (i <= text.length && i >= 0) {
        i += row_length;
        i = text.indexOf(' ', i - 2);
        if (i > 0) {
          text = text.substring(0, i) + '\n' + text.substring(i + 1, text.length);
        }
      }
      lines = text.split('\n');
      return lines;
    }
  };
  win.GraphLayout = {
    matrix: null,
    padding: 0,
    min_block_dist: function(node1, node2) {
      return (node1.dia / 2 + node2.dia / 2 + this.params.margin) * this.params.reducer;
    },
    min_block_dist_dyn: function(node1, node2) {
      var a, b, c;
      if (node1.x && node2.x && node1.y && node2.y) {
        a = Math.sqrt((node1.h + node2.h) * (node1.h + node2.h) / 4 + (node1.x - node2.x) * (node1.x - node2.x));
        b = Math.sqrt((node1.w + node2.w) * (node1.w + node2.w) / 4 + (node1.y - node2.y) * (node1.y - node2.y));
        c = (node1.dia / 2 + node2.dia / 2 + this.params.margin) * this.params.reducer;
        return Math.min(Math.min(a, b), c);
      } else {
        return this.min_block_dist(node1, node2);
      }
    },
    arrange: function() {
      var S, edge, l, len, len1, len2, m, n, o, q, ref, ref1, row;
      this.init_edges();
      this.params = {
        mind2: 0.0001,
        mind: 0.01,
        speed: 0.1,
        maxVertexMovement: 0.5,
        maxRepulsiveForceDistance2: 0.5 * 0.5,
        k: 1 / Math.sqrt(4 * this.V),
        l: 0.005
      };
      S = 0;
      ref = this.matrix;
      for (l = 0, len = ref.length; l < len; l++) {
        row = ref[l];
        for (n = 0, len1 = row.length; n < len1; n++) {
          m = row[n];
          if (m) {
            S += m.bbox.width * m.bbox.height;
          }
        }
      }
      this.params.W = 3 * Math.sqrt(S);
      this.params.margin = this.params.W * 0.03;
      this.params.reducer = Math.sqrt(2) / this.params.W;
      this.params.restorer = 1 / this.params.reducer;
      ref1 = this.edges;
      for (o = 0, len2 = ref1.length; o < len2; o++) {
        edge = ref1[o];
        edge.min_len = this.min_block_dist(edge.from.node, edge.to.node);
      }
      Rand.reset();
      for (q = 0; q <= 100; q++) {
        this.graph_layout_iteration();
      }
      return this.layout_arrange();
    },
    init_edges: function() {
      var i, j, l, len, m, ref, results, row;
      this.edges = [];
      this.V = this.matrix.length;
      ref = this.matrix;
      results = [];
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        row = ref[i];
        results.push((function() {
          var len1, n, results1;
          results1 = [];
          for (j = n = 0, len1 = row.length; n < len1; j = ++n) {
            m = row[j];
            if (m && i !== j) {
              this.edges.push({
                from: this.matrix[i][i],
                to: m,
                arrow: false
              });
              this.edges.push({
                from: m,
                to: this.matrix[j][j],
                arrow: true
              });
              results1.push(this.V++);
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    },
    graph_layout_iteration: function() {
      var edge, i, j, l, len, len1, len2, len3, len4, m, m1, m2, n, o, prev, q, r, ref, ref1, ref2, results, row;
      prev = [];
      ref = this.matrix;
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        row = ref[i];
        for (j = n = 0, len1 = row.length; n < len1; j = ++n) {
          m1 = row[j];
          if (m1) {
            for (o = 0, len2 = prev.length; o < len2; o++) {
              m = prev[o];
              m2 = this.matrix[m[0]][m[1]];
              this.layout_repulsive(m1.node, m2.node);
            }
            prev.push([i, j]);
          }
        }
      }
      ref1 = this.edges;
      for (q = 0, len3 = ref1.length; q < len3; q++) {
        edge = ref1[q];
        this.layout_attractive(edge);
      }
      ref2 = this.matrix;
      results = [];
      for (r = 0, len4 = ref2.length; r < len4; r++) {
        row = ref2[r];
        results.push((function() {
          var len5, results1, s;
          results1 = [];
          for (s = 0, len5 = row.length; s < len5; s++) {
            m = row[s];
            if (m) {
              results1.push(this.layout_move(m));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    },
    layout_repulsive: function(node1, node2) {
      var d2, dx, dy, f, k, move_x, move_y;
      dx = node1.x - node2.x;
      dy = node1.y - node2.y;
      d2 = dx * dx + dy * dy;
      if (d2 < this.params.mind2) {
        dx = this.params.mind * Rand.random() + this.params.mind;
        dy = this.params.mind * Rand.random() + this.params.mind;
        d2 = dx * dx + dy * dy;
      }
      k = Math.max(this.params.k, this.min_block_dist(node1, node2));
      if (d2 < this.params.maxRepulsiveForceDistance2 && d2 > 0) {
        f = k * k / d2;
        move_x = f * dx;
        move_y = f * dy;
        node2.move_x -= move_x;
        node2.move_y -= move_y;
        node1.move_x += move_x;
        return node1.move_y += move_y;
      }
    },
    layout_attractive: function(edge) {
      var d, d2, dx, dy, f, k, move_x, move_y, node1, node2;
      node1 = edge.from.node;
      node2 = edge.to.node;
      dx = node1.x - node2.x;
      dy = node1.y - node2.y;
      d2 = dx * dx + dy * dy;
      if (d2 < this.params.mind2) {
        dx = this.params.mind * Rand.random() + this.params.mind;
        dy = this.params.mind * Rand.random() + this.params.mind;
        d2 = dx * dx + dy * dy;
      }
      d = Math.sqrt(d2);
      k = Math.max(this.params.k, edge.min_len);
      f = d / k;
      move_x = f * dx;
      move_y = f * dy;
      node2.move_x += move_x;
      node2.move_y += move_y;
      node1.move_x -= move_x;
      return node1.move_y -= move_y;
    },
    layout_move: function(m) {
      var max, xmove, ymove;
      xmove = this.params.speed * m.node.move_x;
      ymove = this.params.speed * m.node.move_y;
      max = this.params.maxVertexMovement;
      if (xmove > max) {
        xmove = max;
      }
      if (xmove < -max) {
        xmove = -max;
      }
      if (ymove > max) {
        ymove = max;
      }
      if (ymove < -max) {
        ymove = -max;
      }
      m.node.x += xmove;
      m.node.y += ymove;
      m.node.move_x = 0;
      return m.node.move_y = 0;
    },
    layout_bounds: function() {
      var l, len, len1, m, maxx, maxy, minx, miny, n, ref, row;
      minx = miny = Infinity;
      maxx = maxy = -Infinity;
      ref = this.matrix;
      for (l = 0, len = ref.length; l < len; l++) {
        row = ref[l];
        for (n = 0, len1 = row.length; n < len1; n++) {
          m = row[n];
          if (m) {
            minx = Math.min(minx, m.node.x);
            miny = Math.min(miny, m.node.y);
            maxx = Math.max(maxx, m.node.x);
            maxy = Math.max(maxy, m.node.y);
          }
        }
      }
      return this.graph = {
        minx: minx,
        miny: miny,
        maxx: maxx,
        maxy: maxy
      };
    },
    layout_arrange: function() {
      var l, len, len1, len2, m, n, o, padding_x, ref, ref1, results, row;
      padding_x = Theme.cellp[this.level - 1];
      ref = this.matrix;
      for (l = 0, len = ref.length; l < len; l++) {
        row = ref[l];
        for (n = 0, len1 = row.length; n < len1; n++) {
          m = row[n];
          if (m) {
            m.node.x = m.node.x * this.params.restorer - m.bbox.width / 2 + this.padding;
            m.node.y = m.node.y * this.params.restorer - m.bbox.height / 2 + this.padding;
          }
        }
      }
      this.layout_bounds();
      ref1 = this.matrix;
      results = [];
      for (o = 0, len2 = ref1.length; o < len2; o++) {
        row = ref1[o];
        results.push((function() {
          var len3, q, results1;
          results1 = [];
          for (q = 0, len3 = row.length; q < len3; q++) {
            m = row[q];
            if (m) {
              m.node.x -= this.graph.minx;
              m.node.y -= this.graph.miny;
              results1.push(m.object.move(m.node.x, m.node.y));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  };
  win.VectorObj = (function() {
    function VectorObj(options) {
      var defaults;
      defaults = {
        model: {},
        level: 0,
        canvas: null,
        x: 0,
        y: 0,
        w: 0,
        h: 0
      };
      this.opt = $.extend({}, defaults, options);
      this.model = this.opt.model;
      this.level = this.opt.level;
      this.draw = this.opt.canvas;
      this.x = this.opt.x;
      this.y = this.opt.y;
      this.w = this.opt.w;
      this.h = this.opt.h;
      this.id = this.opt.id;
      this.ready = this.opt.ready;
      this.fontsize1 = Theme.sizes[this.level];
      this.fontsize2 = Theme.sizes[this.level + 1];
      this.fontsize3 = Theme.sizes[this.level + 2];
      this.spacesize1 = Theme.spaces[this.level];
      this.spacesize2 = Theme.spaces[this.level + 1];
      this.block_spacing = Theme.spaces[this.level + 1] - Theme.cellp[this.level + 1] * 2;
    }

    VectorObj.prototype.render = function() {
      this.object = this.draw.rect(this.model.w, this.model.h).attr({
        fill: this.model.color
      });
      return this.object.drawer = this;
    };

    VectorObj.prototype.bbox = function() {
      return this.object.bbox();
    };

    return VectorObj;

  })();
  win.Element = (function(superClass) {
    extend(Element, superClass);

    function Element(options) {
      Element.__super__.constructor.call(this, options);
    }

    Element.prototype.render = function() {
      var box, desc_w, desc_x, desc_y, image_x, image_x2, image_y, max_w, title_x, title_y;
      this.object = this.draw.group().data('level', this.level);
      this.object.attr('data-model', this.id);
      this.object.drawer = this;
      this.pad = Theme.cellp[this.level - 1];
      this.element_frame();
      title_x = image_x = image_x2 = desc_x = this.x + this.pad;
      title_y = image_y = desc_y = this.y + this.pad;
      max_w = desc_w = Theme.width[this.level];
      if (this.model.picture && this.model.picture.pos === 'left.title') {
        box = this.render_icon(title_x, title_y);
        title_x += box.width + this.fontsize2;
      }
      if (this.model.title) {
        box = this.render_title(title_x, title_y);
        image_x2 = box.x2;
        image_y = desc_y = box.y2 + this.fontsize3;
        title_x += box.width + this.fontsize2;
        max_w = desc_w = Math.max(desc_w, box.width);
      }
      if (this.model.picture && this.model.picture.pos === 'right.title') {
        box = this.render_icon(title_x, title_y);
      }
      if (this.model.picture && this.model.picture.url) {
        if (this.model.picture.pos === 'left.desc') {
          box = this.render_image(image_x, image_y);
          desc_x += box.width + this.fontsize2;
          desc_w = Math.max(0, desc_w - box.width - this.fontsize2);
        } else if (this.model.picture.pos === 'right.desc') {
          box = this.render_image(Math.max(image_x + Theme.width[this.level], image_x2), image_y, true);
          desc_w = Math.max(0, desc_w - box.width - this.fontsize2);
        } else if (this.model.picture.pos === 'above.desc') {
          box = this.render_image(image_x, image_y);
          desc_y += box.height + this.fontsize2;
        }
      }
      if (this.model.description) {
        desc_w = Math.min(desc_w, Theme.width[this.level]);
        box = this.render_description(desc_x, desc_y, desc_w);
        image_y = box.y2 + this.fontsize2;
        if (this.model.picture && this.model.picture.pos === 'right.desc') {
          this.ra_img.x(box.x2 + this.fontsize2);
        }
      }
      if (this.model.picture && this.model.picture.pos === 'below.desc') {
        this.render_image(image_x, image_y);
      }
      if (this.model.structure) {
        this.render_structure(this.x, this.bbox().y2 || this.y, max_w || 0);
      }
      return this.fix_frame();
    };

    Element.prototype.iconic_picture = function(x, y) {
      var img, ph, pw, url, xsize, ysize;
      pw = this.model.picture.width;
      ph = this.model.picture.height;
      ysize = this.fontsize1 * Theme.lineHeight;
      xsize = pw > 0 ? ysize / ph * pw : ysize;
      url = this.model.picture.preview || this.model.picture.url;
      img = this.draw.image(url, xsize, ysize).move(x, y).back();
      return img;
    };

    Element.prototype.render_icon = function(x, y) {
      var img;
      img = this.iconic_picture(x, y);
      if (this.model.picture.video) {
        img.addClass('pointer').click((function(_this) {
          return function() {
            return win.open(_this.model.picture.url, '_blank');
          };
        })(this));
      }
      this.object.add(img);
      return img.bbox();
    };

    Element.prototype.text_mask = function(bbox, level) {
      var mask;
      mask = this.draw.rect(bbox.width, bbox.height).addClass('mask').attr('data-level', level).move(bbox.x, bbox.y).fill(Theme.color.mask);
      this.object.add(mask);
      return mask.back().hide();
    };

    Element.prototype.render_title = function(x, y) {
      var base, bbox, text, title, w;
      base = this.draw;
      if (this.model.link && this.model.link.url && this.model.link.pos === 'title') {
        base = this.draw.link(this.model.link.url);
        base.target('_blank').addClass('pointer');
        title = base;
      }
      text = base.plain(this.model.title).font({
        size: this.fontsize1,
        family: Theme.fontFamily,
        leading: Theme.lineHeight + 'em'
      }).attr('data-level', this.level).move(x, y);
      text.build(true);
      w = text.bbox().width;
      while (w < Theme.spaces[this.level]) {
        text.plain(' ');
        w = text.bbox().width;
      }
      text.build(false);
      text.fill(this.model.featured ? Theme.color.emphasis : Theme.color.text);
      if (!title) {
        title = text;
      }
      this.object.add(title);
      bbox = text.bbox();
      this.text_mask(bbox, this.level);
      return bbox;
    };

    Element.prototype.balance_text = function(w) {
      var balanced, description, l, len, lines, paragraph;
      description = this.model.description.split('\n');
      lines = [];
      for (l = 0, len = description.length; l < len; l++) {
        paragraph = description[l];
        if (paragraph.match(/[^\s]/g)) {
          balanced = Render.balance_text(paragraph.replace(/(\s+)$/g, ''), this.fontsize2, w);
        } else {
          balanced = [' '];
        }
        $.merge(lines, balanced);
      }
      return lines;
    };

    Element.prototype.render_description = function(x, y, w) {
      var bbox, lines, link, text;
      lines = this.balance_text(w);
      link = this.model.link && this.model.link.url && this.model.link.pos === 'desc' ? this.model.link.url : null;
      text = this.draw.text((function(_this) {
        return function(add) {
          var l, len, line, linkobj;
          for (l = 0, len = lines.length; l < len; l++) {
            line = lines[l];
            add.tspan(line).newLine();
          }
          if (link) {
            linkobj = add.tspan(' ➦');
            linkobj.addClass('pointer fa').fill(Theme.color.link);
            return linkobj.click(function() {
              return win.open(_this.model.link.url, '_blank');
            });
          }
        };
      })(this)).font({
        size: this.fontsize2,
        family: Theme.fontFamily,
        leading: Theme.lineHeight + 'em'
      }).attr('data-level', this.level + 1).move(x, y).fill(Theme.color.text);
      this.object.add(text);
      bbox = text.bbox();
      this.text_mask(bbox, this.level + 1);
      return bbox;
    };

    Element.prototype.sized_picture = function(x, y, alignright) {
      var img, ph, pw, url, xsize, ysize;
      pw = this.model.picture.width;
      ph = this.model.picture.height;
      if (this.model.picture.scale) {
        pw *= this.model.picture.scale;
        ph *= this.model.picture.scale;
      }
      xsize = Theme.imgsize[this.level] * (pw > 0 ? Math.min(1, pw / Theme.max_imgwidth) : 1);
      ysize = pw > 0 ? xsize / pw * ph : xsize;
      if (alignright) {
        x -= xsize;
      }
      url = this.model.picture.preview || this.model.picture.url;
      img = this.draw.image(url, xsize, ysize).move(x, y).back();
      return img;
    };

    Element.prototype.render_image = function(x, y, alignright) {
      var img;
      img = this.sized_picture(x, y, alignright);
      if (this.model.picture.video) {
        img.addClass('pointer').click((function(_this) {
          return function() {
            return win.open(_this.model.picture.url, '_blank');
          };
        })(this));
      }
      if (alignright) {
        this.ra_img = img;
      }
      this.object.add(img);
      return img.bbox();
    };

    Element.prototype.render_structure = function(x, y, w, ready) {
      if (!w) {
        w = Theme.width[this.level];
      }
      this.structure = new Structure({
        model: this.model,
        level: this.level,
        canvas: this.draw,
        x: x,
        y: y,
        w: w,
        ready: ready,
        EL: this.constructor
      });
      this.structure.render();
      this.structure.object.dmove(Theme.cellp[this.level - 1] - Theme.cellp[this.level], this.fontsize2);
      return this.object.add(this.structure.object);
    };

    Element.prototype.rerender_structure = function(pH) {
      var bbox, objects, ready;
      if (pH == null) {
        pH = {
          only: ''
        };
      }
      bbox = this.structure.object.bbox();
      ready = {};
      objects = $('#wrapper svg').find('g');
      this.model.each_child((function(_this) {
        return function(m) {
          var el;
          if (m.id === pH.only) {
            return;
          }
          el = objects.filter('[data-model="' + m.id + '"]')[0];
          if (el) {
            return ready[m.id] = el.instance;
          }
        };
      })(this));
      this.structure.object.remove();
      this.render_structure(bbox.x - Theme.cellp[this.level - 1] + Theme.cellp[this.level], bbox.y - this.fontsize2, 0, ready);
      return this.fix_frame();
    };

    Element.prototype.element_frame = function() {
      var frame_stroke;
      frame_stroke = {
        color: Theme.color.background,
        width: Theme.strokes[this.level - 1]
      };
      this.frame = this.draw.rect(1, 1).radius(this.pad).fill('none').stroke(frame_stroke);
      this.frame.addClass('frame none').move(this.x, this.y);
      return this.object.add(this.frame);
    };

    Element.prototype.fix_frame = function() {
      var fullbox;
      this.frame.back().size(1, 1);
      fullbox = this.bbox();
      return this.frame.size(fullbox.width / this.object.trans.scaleX + this.pad, fullbox.height / this.object.trans.scaleY + this.pad);
    };

    return Element;

  })(VectorObj);
  win.Element_NoFrame = (function(superClass) {
    extend(Element_NoFrame, superClass);

    function Element_NoFrame(options) {
      Element_NoFrame.__super__.constructor.call(this, options);
    }

    Element_NoFrame.prototype.rerender_structure = function() {};

    return Element_NoFrame;

  })(Element);
  win.Element_Plain = (function(superClass) {
    extend(Element_Plain, superClass);

    function Element_Plain(options) {
      Element_Plain.__super__.constructor.call(this, options);
    }

    Element_Plain.prototype.render_icon = function(x, y) {
      var img;
      img = this.iconic_picture();
      this.object.add(img);
      return img.bbox();
    };

    Element_Plain.prototype.render_title = function(x, y) {
      var bbox, text, title, w;
      text = this.draw.plain(this.model.title).font({
        size: this.fontsize1,
        family: Theme.fontFamily,
        leading: Theme.lineHeight + 'em'
      }).attr('data-level', this.level).move(x, y);
      text.build(true);
      w = text.bbox().width;
      while (w < Theme.spaces[this.level]) {
        text.plain(' ');
        w = text.bbox().width;
      }
      text.build(false);
      if (this.model.featured) {
        text.fill(Theme.color.emphasis);
      }
      if (!title) {
        title = text;
      }
      this.object.add(title);
      bbox = text.bbox();
      return bbox;
    };

    Element_Plain.prototype.render_description = function(x, y, w) {
      var bbox, lines, link, text;
      lines = this.balance_text(w);
      link = this.model.link && this.model.link.url ? this.model.link.url : null;
      text = this.draw.text((function(_this) {
        return function(add) {
          var l, len, line, linkobj;
          for (l = 0, len = lines.length; l < len; l++) {
            line = lines[l];
            add.tspan(line).newLine();
          }
          if (link) {
            linkobj = add.tspan(link).newLine();
            return linkobj.fill(Theme.color.link);
          }
        };
      })(this)).font({
        size: this.fontsize2,
        family: Theme.fontFamily,
        leading: Theme.lineHeight + 'em'
      }).attr('data-level', this.level + 1).move(x, y);
      this.object.add(text);
      bbox = text.bbox();
      return bbox;
    };

    Element_Plain.prototype.embed_image = function(loaded, object) {
      var canvas, context, img;
      canvas = doc.createElement('CANVAS');
      context = canvas.getContext('2d');
      img = new Image;
      img.setAttribute('crossorigin', 'anonymous');
      img.onload = (function(_this) {
        return function() {
          var dataURL;
          canvas.height = loaded.height;
          canvas.width = loaded.width;
          context.drawImage(img, 0, 0);
          try {
            dataURL = canvas.toDataURL('image/png');
          } catch (_error) {
            dataURL = loaded.url;
          }
          object.loaded(function() {});
          object.load(dataURL);
          return canvas = null;
        };
      })(this);
      img.onerror = (function(_this) {
        return function() {
          return canvas = null;
        };
      })(this);
      return img.src = loaded.url;
    };

    Element_Plain.prototype.render_image = function(x, y, alignright) {
      var img;
      img = this.sized_picture(x, y, alignright);
      img.loaded((function(_this) {
        return function(loaded) {
          return _this.embed_image(loaded, img);
        };
      })(this));
      if (alignright) {
        this.ra_img = img;
      }
      this.object.add(img);
      return img.bbox();
    };

    return Element_Plain;

  })(Element_NoFrame);
  win.Structure = (function(superClass) {
    extend(Structure, superClass);

    function Structure(options) {
      Structure.__super__.constructor.call(this, options);
    }

    Structure.prototype.render = function() {
      this.stroke = {
        color: Theme.color.stroke,
        width: Theme.strokes[this.level]
      };
      this.object = this.draw.group().data('level', this.level);
      this.object.drawer = this;
      switch (this.model.structure) {
        case 'list.bricks':
          return this.render_list_compact();
        case 'list.inline':
          return this.render_list_inline();
        case 'list.stack':
          return this.render_list_stack();
        case 'matrix':
          return this.render_matrix();
        case 'graph':
          return this.render_graph();
      }
    };

    Structure.prototype.render_element = function(model) {
      var element, object;
      if (this.ready && this.ready[model.id]) {
        object = this.ready[model.id];
      } else {
        element = new this.opt.EL({
          id: model.id,
          model: model,
          level: this.level + 1,
          canvas: this.draw,
          x: this.x,
          y: this.y
        });
        element.render();
        object = element.object;
      }
      return object;
    };

    Structure.prototype.render_list_compact = function() {
      var above, draw_child, x, y;
      x = 0;
      above = y = 0;
      draw_child = (function(_this) {
        return function(model) {
          var object, this_bbox;
          object = _this.render_element(model);
          _this.object.add(object);
          this_bbox = object.bbox();
          object.move(x, y);
          if (x + _this.block_spacing + this_bbox.width > _this.w) {
            if (x > 0) {
              object.dmove(-x, above);
              x = 0;
              y += above;
            }
            above = this_bbox.height;
          } else {
            above = Math.max(above, this_bbox.height);
          }
          return x += this_bbox.width + _this.block_spacing;
        };
      })(this);
      this.model.each_element((function(_this) {
        return function(model) {
          return draw_child(model);
        };
      })(this));
      return this.model.each_relation((function(_this) {
        return function(model) {
          return draw_child(model);
        };
      })(this));
    };

    Structure.prototype.render_list_inline = function() {
      var relations, x;
      this.matrix = [];
      relations = false;
      x = 0;
      this.model.each_element((function(_this) {
        return function(model, i) {
          var j, l, len, object, ref, rel, src_obj, y;
          src_obj = object = _this.render_element(model);
          _this.object.add(object);
          object.x(x);
          _this.matrix.push([]);
          y = 0;
          ref = _this.model.matrix[i];
          for (j = l = 0, len = ref.length; l < len; j = ++l) {
            rel = ref[j];
            _this.matrix[i].push(i === j ? {
              object: src_obj
            } : null);
            if (j === i || !_this.model.system[rel]) {
              continue;
            }
            y += object.rbox().height;
            object = _this.render_element(_this.model.system[rel]);
            _this.object.add(object);
            object.move(x, y);
            _this.matrix[i][j] = {
              object: object
            };
            relations = true;
          }
          return x = _this.object.bbox().width + _this.block_spacing;
        };
      })(this));
      if (relations) {
        this.render_nodes(false);
        return this.render_edges();
      }
    };

    Structure.prototype.render_list_stack = function() {
      var R, Yoffset, relations, y;
      this.matrix = [];
      relations = false;
      R = this.fontsize2 / 8;
      Yoffset = this.y + Theme.cellp[this.level] + this.fontsize2 * 0.57 + R;
      y = 0;
      this.model.each_element((function(_this) {
        return function(model, i) {
          var bullet, j, l, len, object, ref, rel, src_obj, x;
          src_obj = object = _this.render_element(model);
          _this.object.add(object);
          object.y(y);
          bullet = _this.draw.circle(R * 2).fill(Theme.color.bullet).center(R, Yoffset + y);
          _this.object.add(bullet);
          bullet.back();
          _this.matrix.push([]);
          x = 0;
          ref = _this.model.matrix[i];
          for (j = l = 0, len = ref.length; l < len; j = ++l) {
            rel = ref[j];
            _this.matrix[i].push(i === j ? {
              object: src_obj
            } : null);
            if (j === i || !_this.model.system[rel]) {
              continue;
            }
            x += object.rbox().width;
            object = _this.render_element(_this.model.system[rel]);
            _this.object.add(object);
            object.move(x, y);
            _this.matrix[i][j] = {
              object: object
            };
            relations = true;
          }
          return y = _this.object.bbox().height;
        };
      })(this));
      if (relations) {
        this.render_nodes(false);
        return this.render_edges();
      }
    };

    Structure.prototype.arrange_matrix = function() {
      var col_w, el, i, j, l, len, len1, len2, len3, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, results, row, row_h, s, x, y;
      p = Theme.cellp[this.level - 1];
      this.cols_w = [];
      for (i = l = 0, ref = this.matrix.length; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
        this.cols_w.push(p);
      }
      this.rows_h = [];
      for (i = n = 0, ref1 = this.matrix.length; 0 <= ref1 ? n < ref1 : n > ref1; i = 0 <= ref1 ? ++n : --n) {
        this.rows_h.push(p);
      }
      ref2 = this.matrix;
      for (i = o = 0, len = ref2.length; o < len; i = ++o) {
        row = ref2[i];
        for (j = q = 0, len1 = row.length; q < len1; j = ++q) {
          el = row[j];
          if (!el) {
            continue;
          }
          this.rows_h[i] = Math.max(this.rows_h[i], el.bbox.height);
          this.cols_w[j] = Math.max(this.cols_w[j], el.bbox.width);
        }
      }
      y = 0;
      ref3 = this.rows_h;
      results = [];
      for (i = r = 0, len2 = ref3.length; r < len2; i = ++r) {
        row_h = ref3[i];
        x = 0;
        ref4 = this.cols_w;
        for (j = s = 0, len3 = ref4.length; s < len3; j = ++s) {
          col_w = ref4[j];
          el = this.matrix[i][j];
          if (el) {
            el.object.move(x, y);
          }
          x += col_w;
        }
        results.push(y += row_h);
      }
      return results;
    };

    Structure.prototype.render_grid = function() {
      var col, i, l, len, len1, line, mh, mw, n, o, q, rect, ref, ref1, ref2, ref3, row, x, y;
      mh = 0;
      ref = this.rows_h;
      for (l = 0, len = ref.length; l < len; l++) {
        row = ref[l];
        mh += row;
      }
      mw = 0;
      ref1 = this.cols_w;
      for (n = 0, len1 = ref1.length; n < len1; n++) {
        col = ref1[n];
        mw += col;
      }
      x = this.x;
      for (i = o = 0, ref2 = this.cols_w.length - 1; 0 <= ref2 ? o < ref2 : o > ref2; i = 0 <= ref2 ? ++o : --o) {
        x += this.cols_w[i];
        line = this.draw.line(x, this.y, x, this.y + mh).stroke(this.stroke);
        this.object.add(line);
        line.back();
      }
      y = this.y;
      for (i = q = 0, ref3 = this.rows_h.length - 1; 0 <= ref3 ? q < ref3 : q > ref3; i = 0 <= ref3 ? ++q : --q) {
        y += this.rows_h[i];
        line = this.draw.line(this.x, y, this.x + mw, y).stroke(this.stroke);
        this.object.add(line);
        line.back();
      }
      rect = this.draw.rect(mw, mh).move(this.x, this.y).fill('none').stroke(this.stroke);
      this.object.add(rect);
      return rect.back();
    };

    Structure.prototype.render_elements_links = function() {
      var bbox, element_tag, i, j, l, len, links, model, object, ref, results;
      this.matrix = [];
      ref = this.model.matrix;
      results = [];
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        links = ref[i];
        this.matrix[i] = [];
        results.push((function() {
          var len1, n, results1;
          results1 = [];
          for (j = n = 0, len1 = links.length; n < len1; j = ++n) {
            element_tag = links[j];
            this.matrix[i][j] = null;
            if (!element_tag) {
              continue;
            }
            model = this.model.system[element_tag];
            object = this.render_element(model);
            this.object.add(object);
            bbox = object.bbox();
            results1.push(this.matrix[i][j] = {
              object: object,
              bbox: bbox,
              node: {
                x: 0,
                y: 0,
                move_x: 0,
                move_y: 0,
                dia: Math.sqrt(bbox.width * bbox.width + bbox.height * bbox.height),
                h: bbox.height,
                w: bbox.width,
                is_element: i === j
              }
            });
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Structure.prototype.render_matrix = function() {
      this.render_elements_links();
      this.arrange_matrix();
      return this.render_grid();
    };

    Structure.prototype.arrange_graph = function() {
      GraphLayout.matrix = this.matrix;
      GraphLayout.padding = Theme.cellp[this.level - 1];
      return GraphLayout.arrange();
    };

    Structure.prototype.render_nodes = function(show_elements) {
      var bbox, i, j, l, len, m, padding_x, rbox, rect, ref, results, row;
      padding_x = Theme.cellp[this.level];
      ref = this.matrix;
      results = [];
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        row = ref[i];
        results.push((function() {
          var len1, n, results1;
          results1 = [];
          for (j = n = 0, len1 = row.length; n < len1; j = ++n) {
            m = row[j];
            if (m) {
              bbox = m.object.bbox();
              rbox = m.object.rbox();
              rect = this.draw.rect(bbox.width, bbox.height).radius(padding_x).move(rbox.x, rbox.y).fill(Theme.color.background);
              if (i === j && show_elements) {
                rect.stroke(this.stroke);
              } else {
                rect.opacity(Theme.rel_opacity);
              }
              this.object.add(rect);
              results1.push(rect.back());
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Structure.prototype.make_arrow_marker = function() {
      var p;
      p = Theme.markersize;
      this.arrow = this.draw.marker(4 * p, 4 * p, function(add) {
        return add.path('M 0,' + 2 * p + ' L' + 4 * p + ',' + 3 * p + ' L' + 3 * p + ',' + 2 * p + ' L' + 4 * p + ',' + p + ' Z');
      });
      return this.arrow.fill(this.stroke.color);
    };

    Structure.prototype.closest_point = function(points, p) {
      var c, closest, dx, dy, i, l, len, minw, w;
      minw = Infinity;
      closest = null;
      for (i = l = 0, len = points.length; l < len; i = ++l) {
        c = points[i];
        dx = p.x - c.x;
        dy = p.y - c.y;
        w = dx * dx + dy * dy;
        if (minw > w) {
          minw = w;
          closest = c;
        }
      }
      return closest;
    };

    Structure.prototype.connect_objects = function(p0, p1, p2) {
      var any_point_inside, cp1, cp2, edge_length, edge_points, find_intersection, inside, ip1, ip2, ipA, ipB, ipC, line, make_helper, p1c, path;
      edge_points = [
        {
          x: p1.cx,
          y: p1.cy - p1.height / 2
        }, {
          x: p1.cx - p1.width / 2,
          y: p1.cy
        }, {
          x: p1.cx,
          y: p1.cy + p1.height / 2
        }, {
          x: p1.cx + p1.width / 2,
          y: p1.cy
        }
      ];
      cp1 = this.closest_point(edge_points, {
        x: p0.cx,
        y: p0.cy
      });
      cp2 = this.closest_point(edge_points, {
        x: p2.cx,
        y: p2.cy
      });
      p1c = {
        x: (cp1.x + cp2.x) / 2,
        y: (cp1.y + cp2.y) / 2
      };
      path = 'M ' + p0.cx + ',' + p0.cy;
      path += ' Q ' + cp1.x + ',' + cp1.y + ' ' + p1c.x + ',' + p1c.y;
      path += ' Q ' + cp2.x + ',' + cp2.y + ' ' + p2.cx + ',' + p2.cy;
      line = this.draw.path(path).fill('none').stroke(this.stroke);
      this.object.add(line);
      line.back();
      edge_length = line.length();
      make_helper = (function(_this) {
        return function(pos) {
          var dp, helper, hp1, hp2, parent;
          dp = 0.01;
          hp1 = line.pointAt(pos * edge_length);
          hp2 = line.pointAt((pos - dp) * edge_length);
          helper = _this.draw.line(hp1.x, hp1.y, hp2.x, hp2.y).stroke({
            width: _this.stroke.width,
            color: Theme.color.stroke
          });
          helper.marker('start', _this.arrow);
          _this.object.add(helper);
          helper.back();
          if (!!navigator.userAgent.match(/(MSIE\s)|(Trident.*rv\:11\.)/)) {
            parent = helper.node.parentNode;
            parent.removeChild(helper.node);
            return parent.appendChild(helper.node);
          }
        };
      })(this);
      inside = function(box, p) {
        return p.x > box.x && p.x < box.x2 && p.y > box.y && p.y < box.y2;
      };
      find_intersection = (function(_this) {
        return function(box, from, to) {
          var e1, e2, eC;
          e1 = from;
          e2 = to;
          while (Math.abs(e2 - e1) > 0.01) {
            eC = (e1 + e2) / 2;
            if (inside(box, line.pointAt(eC * edge_length))) {
              e1 = eC;
            } else {
              e2 = eC;
            }
          }
          return (e1 + e2) / 2;
        };
      })(this);
      any_point_inside = (function(_this) {
        return function(box, from, to) {
          var e1, e2;
          e1 = Math.min(from, to);
          e2 = Math.max(from, to);
          while (e2 > e1) {
            if (inside(box, line.pointAt(e1 * edge_length))) {
              break;
            }
            e1 += 0.01;
          }
          return e1;
        };
      })(this);
      ipA = find_intersection(p0, 0, 1);
      ipB = find_intersection(p2, 1, 0);
      ipC = any_point_inside(p1, ipA, ipB);
      ip1 = find_intersection(p1, ipC, ipA);
      ip2 = find_intersection(p1, ipC, ipB);
      make_helper((ipA + ip1) / 2);
      return make_helper((ipB + ip2) / 2);
    };

    Structure.prototype.render_edges = function() {
      var i, j, l, len, m, p0, p1, p2, ref, results, row;
      this.make_arrow_marker();
      ref = this.matrix;
      results = [];
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        row = ref[i];
        results.push((function() {
          var len1, n, results1;
          results1 = [];
          for (j = n = 0, len1 = row.length; n < len1; j = ++n) {
            m = row[j];
            if (m && i !== j) {
              p1 = m.object.rbox();
              p0 = this.matrix[i][i].object.rbox();
              p2 = this.matrix[j][j].object.rbox();
              results1.push(this.connect_objects(p0, p1, p2));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Structure.prototype.render_graph = function() {
      this.render_elements_links();
      this.arrange_graph();
      this.render_nodes(true);
      return this.render_edges();
    };

    return Structure;

  })(VectorObj);
  win.ModelWebView = (function() {
    function ModelWebView(options) {
      this.EL = Element_NoFrame;
      this.init(options);
      if (!SVG.supported) {
        return null;
      }
      Render.init();
      this.build_content();
      this.controller();
    }

    ModelWebView.prototype.init = function(options) {
      var defaults;
      defaults = {
        div: 'canvas',
        model: {}
      };
      this.opt = $.extend({}, defaults, options);
      this.div = $('#' + this.opt.div);
      return this.model = this.opt.model;
    };

    ModelWebView.prototype.build_content = function() {
      viewer.scale_content = (function(_this) {
        return function(scale) {
          var padding;
          padding = _this.padding_x * scale;
          _this.object.scale(scale).move(padding, padding);
          return _this.apply_text_masks();
        };
      })(this);
      this.draw = SVG(this.opt.div).size('100%', '100%');
      this.padding_x = Theme.cellp[Theme.toplevel - 1];
      this.padding_f = Theme.cellp[Theme.toplevel];
      return this.render_all();
    };

    ModelWebView.prototype.controller = function() {};

    ModelWebView.prototype.render_all = function() {
      this.render();
      return viewer.zoom_fit(this.object);
    };

    ModelWebView.prototype.render = function() {
      var model, system;
      model = this.model[this.model.root];
      system = new this.EL({
        id: this.model.root,
        model: model,
        level: Theme.toplevel,
        canvas: this.draw
      });
      system.render();
      this.object = system.object;
      return this.correct_canvas();
    };

    ModelWebView.prototype.correct_canvas = function() {
      var bbox, newh, neww;
      bbox = this.object.bbox();
      neww = bbox.width + this.padding_x * 2 * viewer.scale;
      newh = bbox.height + this.padding_x * 2 * viewer.scale;
      this.div.css({
        width: neww,
        height: newh
      });
      return viewer.save_canvas_size(neww / viewer.scale, newh / viewer.scale);
    };

    ModelWebView.prototype.rerender = function() {
      this.draw.clear();
      viewer.zoom(1);
      return this.render_all();
    };

    ModelWebView.prototype.redraw = function(tag) {
      var el, parent, parent_obj, parent_tag;
      if (tag === this.model.root) {
        this.rerender();
        return;
      }
      el = this.div.find('g[data-model="' + tag + '"]')[0];
      if (!el) {
        return;
      }
      parent_obj = el.instance.parent.parent;
      parent_tag = parent_obj.attr('data-model');
      parent = parent_obj.drawer;
      parent.model = this.model[parent_tag];
      parent.rerender_structure({
        only: tag
      });
      this.correct_canvas();
      return this.apply_text_masks();
    };

    ModelWebView.prototype.apply_text_masks = function() {
      var level, masks, texts;
      level = Theme.threshold(viewer.scale);
      texts = this.div.find('text').show();
      texts.filter(function() {
        return $(this).attr('data-level') >= level;
      }).hide();
      masks = this.div.find('rect.mask').hide();
      return masks.filter(function() {
        return $(this).attr('data-level') >= level;
      }).show();
    };

    return ModelWebView;

  })();
  win.ModelWebViewEditable = (function(superClass) {
    extend(ModelWebViewEditable, superClass);

    function ModelWebViewEditable(options) {
      this.EL = Element;
      this.init(options);
      if (!SVG.supported) {
        return null;
      }
      Render.init();
      this.build_content();
      this.controller();
    }

    ModelWebViewEditable.prototype.frame_for = function(tag, c) {
      return this.div.find('g[data-model="' + tag + '"]>rect.frame').svgRemoveClass('none').svgAddClass(c);
    };

    ModelWebViewEditable.prototype.no_frames = function(c) {
      this.div.find('rect.frame.' + c).svgRemoveClass(c);
      return this.div.find('rect.frame:not(.current):not(.selected)').svgAddClass('none');
    };

    ModelWebViewEditable.prototype.select = function(tag) {
      this.no_frames('selected');
      return this.frame_for(tag, 'selected');
    };

    ModelWebViewEditable.prototype.deselect = function() {
      return this.no_frames('selected');
    };

    ModelWebViewEditable.prototype.highlight = function(tag) {
      this.no_frames('current');
      return this.frame_for(tag, 'current');
    };

    return ModelWebViewEditable;

  })(ModelWebView);
  return win.ModelStaticView = (function() {
    function ModelStaticView(options) {
      this.EL = Element_Plain;
      this.init(options);
      if (!SVG.supported) {
        return null;
      }
      Render.init();
      this.build_content();
    }

    ModelStaticView.prototype.build_content = function() {
      this.draw = SVG(this.opt.div).size('100%', '100%');
      return this.render();
    };

    ModelStaticView.prototype.render = function() {
      var model, system;
      model = this.model[this.model.root];
      system = new this.EL({
        id: this.model.root,
        model: model,
        level: Theme.toplevel,
        canvas: this.draw
      });
      system.render();
      return this.object = system.object;
    };

    return ModelStaticView;

  })();
})(jQuery, window, document);

//# sourceMappingURL=svg-render.js.map
