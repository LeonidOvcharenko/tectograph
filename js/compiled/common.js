// Generated by CoffeeScript 1.9.3
"use strict";
var slice = [].slice;

!(function($, win, doc) {
  var $body, $doc, k, ref, v;
  $doc = $(doc);
  $body = $('body');
  win.P = {};
  if (typeof cMenu !== "undefined" && cMenu !== null) {
    cMenu.setSrcBase('/images/cMenu/');
  }
  P.get_domain = function(url) {
    return url.replace(/(\/\/.+?\/).+/, '$1');
  };
  P.prepare_favicon_src = function(path, site_url) {
    if (path.match(/^http/)) {
      return path;
    } else {
      return P.get_domain(site_url != null ? site_url : g_pageData.url) + path.replace(/^\//, '');
    }
  };
  P.get_tpl = function(selector) {
    return $(selector + '.tpl').clone().removeClass('tpl');
  };
  $.fn.get_tpl = function(selector) {
    return this.find(selector + '.tpl').clone().removeClass('tpl');
  };
  String.prototype.safe_dots = function() {
    return this.replace(/\./g, '·');
  };
  P.d_not_ready_msg = 'Feature is not implemented yet';
  $.fn.get_wnd = function() {
    return this.closest('.wnd').o();
  };
  P.get_master_page_id = function(page_id) {
    var ref;
    return ((ref = g_db.pages_data[page_id]) != null ? ref.part_of : void 0) || page_id;
  };
  P.recognize_assos = function(text) {
    var assos;
    assos = [];
    text = text.replace(/\[(.+?)≈(.+?)\] ?/g, function(m, key, value) {
      assos.push({
        id: key,
        text: value
      });
      return '';
    });
    return [assos, text];
  };
  Date.prototype.to_formatted = function(_format) {
    var H, HH, M, MM, S, SS, d, dd, m, mm, yyyy;
    yyyy = this.getFullYear();
    m = this.getMonth() + 1;
    mm = (m < 10 && '0' || '') + m;
    d = this.getDate();
    dd = (d < 10 && '0' || '') + d;
    H = this.getHours();
    HH = (H < 10 && '0' || '') + H;
    M = this.getMinutes();
    MM = (M < 10 && '0' || '') + M;
    S = this.getSeconds();
    SS = (S < 10 && '0' || '') + S;
    return _format.replace(/yyyy/, yyyy).replace(/mm/, mm).replace(/dd/, dd).replace(/HH/, HH).replace(/MM/, MM).replace(/SS/, SS);
  };
  String.prototype.UTC_time = function() {
    var parse_res, time_UTC;
    parse_res = this.match(/(\d{4})-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/);
    return time_UTC = new Date(+RegExp.$1, +RegExp.$2 - 1, +RegExp.$3, +RegExp.$4, +RegExp.$5, +RegExp.$6);
  };
  String.prototype.UTC_to_local_time = function() {
    var time_local;
    time_local = new Date(this.UTC_time().getTime() - new Date().getTimezoneOffset() * 60000);
    return time_local;
  };
  win.TrackableTimeout = (function() {
    TrackableTimeout.active_timeoutsH = {};

    TrackableTimeout.clear = function() {
      return this.active_timeoutsH = {};
    };

    TrackableTimeout.active_count = function() {
      return $.H_size(this.active_timeoutsH);
    };

    TrackableTimeout.stop_all = function() {
      var id, results;
      results = [];
      for (id in this.active_timeoutsH) {
        results.push(clearTimeout(id));
      }
      return results;
    };

    TrackableTimeout.execute_and_stop_all_now = function() {
      var fn, id, ref, results;
      this.stop_all();
      ref = this.active_timeoutsH;
      results = [];
      for (id in ref) {
        fn = ref[id];
        results.push(fn());
      }
      return results;
    };

    function TrackableTimeout(delay, fn) {
      this.id = $.run_after(delay, (function(_this) {
        return function() {
          fn();
          return delete _this.constructor.active_timeoutsH[_this.id];
        };
      })(this));
      this.constructor.active_timeoutsH[this.id] = fn;
    }

    TrackableTimeout.prototype.destroy = function() {
      clearTimeout(this.id);
      return delete this.constructor.active_timeoutsH[this.id];
    };

    return TrackableTimeout;

  })();
  win.extend = function(obj, mixin) {
    var method, name, results;
    results = [];
    for (name in mixin) {
      method = mixin[name];
      results.push(obj[name] = method);
    }
    return results;
  };
  win.include = function(klass, mixin) {
    return extend(klass.prototype, mixin);
  };
  $.json = function(url, data, success) {
    return $.post(url, data, success, 'json');
  };
  $.sync_json = function(url, data, success) {
    return $.ajax({
      type: 'POST',
      async: false,
      url: url,
      data: data,
      success: success,
      dataType: 'json'
    });
  };
  String.cyr2trH = {};
  String.cyr2trSc = {};
  String.cyr2trSen = {};
  String.cyr2trH['ukr'] = {
    'Щ': 'Sch',
    'Ш': 'Sh',
    'Є': 'Je',
    'Ж': 'Zh',
    'Ї': 'Ji',
    'Ц': 'Ts',
    'Ч': 'Ch',
    'Ю': 'Ju',
    'Я': 'Ja',
    'щ': 'sch',
    'ш': 'sh',
    'є': 'je',
    'ж': 'zh',
    'ї': 'ji',
    'ц': 'ts',
    'ч': 'ch',
    'ю': 'ju',
    'я': 'ja'
  };
  String.cyr2trSc['ukr'] = 'ЙйУуКкЕеНнГгЗзХхФфІіВвАаПпРрОоЛлДдСсМмИиТтБбь';
  String.cyr2trSen['ukr'] = "JjUuKkEeNnGgZzHhFfIiVvAaPpRrOoLlDdSsMmYyTtBb'";
  String.cyr2trH['rus'] = {};
  ref = String.cyr2trH['ukr'];
  for (k in ref) {
    v = ref[k];
    String.cyr2trH['rus'][k] = v;
  }
  String.cyr2trSc['rus'] = String.cyr2trSc['ukr'] + 'ЫыЁёЪъ';
  String.cyr2trSen['rus'] = String.cyr2trSen['ukr'].replace('Yy', 'Ii') + 'YyEe  ';
  String.prototype.cyr2tr = function(lang) {
    var res;
    if (lang == null) {
      lang = 'ukr';
    }
    res = '';
    res = this.replace(/./g, function(m) {
      var ref1;
      return (ref1 = String.cyr2trH[lang][m]) != null ? ref1 : m;
    });
    return res = res.replace(/./g, function(m) {
      var i;
      i = String.cyr2trSc[lang].indexOf(m);
      if (i > -1) {
        return String.cyr2trSen[lang][i];
      } else {
        return m;
      }
    });
  };
  String.prototype.prepare_for_sorting = function() {
    return this.toLowerCase().replace(/і/g, 'и').replace(/ї/g, 'и').replace(/є/g, 'е');
  };
  String.prototype.strip = String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, '');
  };
  String.prototype.escapeHTML2 = function() {
    return this.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&#34;').replace(/'/g, '&#39;');
  };
  String.prototype.unescapeHTML2 = function() {
    return this.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#34;/g, '"').replace(/&#39;/g, '\'');
  };
  String.prototype.stripTags2 = function() {
    return this.replace(/<\/?[^>]+>/gi, '');
  };
  $.H_size = function(hash) {
    return ((function() {
      var results;
      results = [];
      for (k in hash) {
        results.push(k);
      }
      return results;
    })()).length;
  };
  Array.prototype.pull = function() {
    var arg, args, index, j, len, output;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    output = [];
    for (j = 0, len = args.length; j < len; j++) {
      arg = args[j];
      index = this.indexOf(arg);
      if (index !== -1) {
        output.push(this.splice(index, 1)[0]);
      }
    }
    if (args.length === 1) {
      output = output[0];
    }
    return output;
  };
  Array.prototype.without = function() {
    var args, arr;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    arr = this.copy();
    arr.pull.apply(arr, args);
    return arr;
  };
  Array.prototype.copy = function() {
    return this.concat();
  };
  Array.prototype["with"] = function() {
    var arg, args, arr, j, len;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    arr = this.copy();
    for (j = 0, len = args.length; j < len; j++) {
      arg = args[j];
      arr.push(arg);
    }
    return arr;
  };
  Array.prototype.is_empty = function() {
    return this.length === 0;
  };
  Array.prototype.not_empty = function() {
    return this.length > 0;
  };
  Array.prototype.last = function(n) {
    if (n == null) {
      n = 1;
    }
    return this[this.length - n];
  };
  Array.prototype.includes = function(el) {
    return this.indexOf(el) > -1;
  };
  Array.prototype.sort_collection_by_text_in = function(field) {
    return this.sort(function(_a, _b) {
      var a, b;
      a = _a[field].prepare_for_sorting();
      b = _b[field].prepare_for_sorting();
      switch (false) {
        case a !== b:
          return 0;
        case !(a < b):
          return -1;
        default:
          return 1;
      }
    });
  };
  $.preload = function() {
    var j, len, prefix, results, src;
    results = [];
    for (j = 0, len = arguments.length; j < len; j++) {
      src = arguments[j];
      prefix = '/images/';
      if (src.match(/^\//)) {
        prefix = '';
      }
      results.push((new Image).src = prefix + src);
    }
    return results;
  };
  $.get_cookie = $.gC = function(name) {
    var end_pos, pos, start_pos, tc;
    name = escape(name);
    pos = (' ' + document.cookie).indexOf(' ' + name + '=');
    if (pos > -1) {
      start_pos = pos + name.length + 1;
      tc = document.cookie + ';';
      end_pos = tc.indexOf(';', start_pos);
      return decodeURIComponent(tc.substring(start_pos, end_pos));
    } else {
      return null;
    }
  };
  $.del_cookie = function(name) {
    return document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
  };
  $.unprepare_url_param = function(str) {
    return str.replace(/_/g, ' ').replace(/:under:/g, '_').replace(/:plus:/g, '+');
  };
  $.fn.blink = function(pH) {
    var alpha, blinkCount, ref1, ref2, up_step;
    if (pH == null) {
      pH = {};
    }
    alpha = (ref1 = pH.alpha) != null ? ref1 : 0.2;
    up_step = (ref2 = pH.up_step) != null ? ref2 : 0.02;
    blinkCount = 0;
    if (this.t_blink) {
      clearInterval(this.t_blink);
      this.t_blink = null;
    }
    return this.t_blink = $.run_every(100, (function(_this) {
      return function() {
        _this.css({
          opacity: (blinkCount % 2 ? '' : alpha)
        });
        blinkCount++;
        alpha += up_step;
        if (alpha > 1) {
          alpha = 1;
        }
        if (blinkCount === 8) {
          if (_this.t_blink) {
            clearInterval(_this.t_blink);
            return _this.t_blink = null;
          }
        }
      };
    })(this));
  };
  $.fn.left_x = function() {
    return this.offset().left;
  };
  $.fn.right_x = function() {
    return this.left_x() + this.outerWidth();
  };
  $.fn.top_y = function() {
    return this.offset().top;
  };
  $.fn.bottom_y = function() {
    return this.top_y() + this.outerHeight();
  };
  $.Event.prototype.prevent_selection = function() {
    $body.addClass('noSelect');
    return $doc.one('mouseup', function() {
      return $body.removeClass('noSelect');
    });
  };
  $.fn.enable_prevent_selection_on_mousedown = function() {
    this.off('.enable_prevent_selection_on_mousedown');
    return this.on('mousedown.enable_prevent_selection_on_mousedown', function(e) {
      return e.prevent_selection();
    });
  };
  $.s = function(number) {
    if (number > 1 || number === 0) {
      return 's';
    } else {
      return '';
    }
  };
  $.say = function(pattern, number) {
    return pattern.replace('%N', number).replace('(s)', $.s(number));
  };
  $.fn.align_to = function(target, mode, calibrate) {
    var dx, dy, h_mode, offset, parent_offset, ref1, v_mode;
    if (calibrate == null) {
      calibrate = {};
    }
    if (calibrate.x == null) {
      calibrate.x = 0;
    }
    if (calibrate.y == null) {
      calibrate.y = 0;
    }
    offset = target.offset();
    parent_offset = this.parent().offset();
    this.css({
      left: offset.left - parent_offset.left,
      top: offset.top - parent_offset.top
    });
    ref1 = mode.split('-'), h_mode = ref1[0], v_mode = ref1[1];
    dx = (function() {
      switch (h_mode) {
        case 'right':
          return target.outerWidth();
        case 'center':
          return Math.round(target.outerWidth() / 2);
        default:
          return 0;
      }
    })();
    dy = (function() {
      switch (v_mode) {
        case 'bottom':
          return target.outerHeight();
        case 'center':
          return Math.round(target.outerHeight() / 2);
        default:
          return 0;
      }
    })();
    return this.css({
      left: '+=' + (dx + calibrate.x),
      top: '+=' + (dy + calibrate.y)
    });
  };
  $.fn.enable_remove_html_on_paste = function() {
    this.f_was_paste = false;
    this.off('.enable_remove_html_on_paste');
    this.on('input.enable_remove_html_on_paste', (function(_this) {
      return function() {
        if (_this.f_was_paste) {
          _this.f_was_paste = false;
          _this.text(_this.text().strip());
          return _this.focusEnd();
        }
      };
    })(this));
    this.on('paste.enable_remove_html_on_paste', (function(_this) {
      return function() {
        return _this.f_was_paste = true;
      };
    })(this));
    return this;
  };
  $.fn.make_editable = function(f_enable) {
    var cMenu_handler, event_handler;
    if (f_enable == null) {
      f_enable = true;
    }
    this.prop({
      contenteditable: f_enable
    });
    if (f_enable) {
      this.addClass('g_isEditable');
      if (this.data('events')) {
        cMenu_handler = ((function() {
          var j, len, ref1, results;
          ref1 = this.data('events').contextmenu;
          results = [];
          for (j = 0, len = ref1.length; j < len; j++) {
            event_handler = ref1[j];
            if (event_handler.namespace === 'cMenu') {
              results.push(event_handler);
            }
          }
          return results;
        }).call(this))[0];
        if (cMenu_handler) {
          this.data({
            was_cMenu_handler: cMenu_handler
          });
        }
      }
      this.off('contextmenu.cMenu');
      this.focusEnd();
    } else {
      this.blur();
      this.removeClass('g_isEditable');
      cMenu_handler = this.data('was_cMenu_handler');
      if (cMenu_handler) {
        this.removeData('was_cMenu_handler');
        this.on('contextmenu.cMenu', cMenu_handler);
      }
      if (this.is(':focus')) {
        win.getSelection().removeAllRanges();
      }
    }
    return this;
  };
  $.fn.sort_children_by_text = function() {
    var el, j, len, parent, results, wordA, words;
    parent = this;
    words = [];
    parent.children().each(function() {
      var el;
      el = $(this);
      return words.push([el.text(), el]);
    });
    words = words.sort_collection_by_text_in(0);
    results = [];
    for (j = 0, len = words.length; j < len; j++) {
      wordA = words[j];
      el = wordA[1];
      results.push(el.appendTo(parent));
    }
    return results;
  };
  $.fn.force_reflow = function() {
    if ($.support.transition) {
      this[0].offsetWidth;
    }
    return this;
  };
  $.fn.after_transition = function(fn) {
    if ($.support.transition) {
      return this.one($.support.transition.end, fn);
    } else {
      return fn();
    }
  };
  $.fn.make_last_event_handler_to_be_first = function(evnt) {
    return this.each(function() {
      var el, handlers;
      el = $(this);
      handlers = el.data('events')[evnt];
      return handlers.unshift(handlers.pop());
    });
  };
  $.Event.prototype.click_was_outside = function(block) {
    var f_nested_element_clicked;
    f_nested_element_clicked = $.contains(block[0], this.target);
    return !(block.is(this.target) || f_nested_element_clicked);
  };
  $.is_css_animation_supported = function() {
    var domPrefixes, j, len, pfx;
    if ($.f_is_css_animation_supported == null) {
      $.f_is_css_animation_supported = false;
      $.css_animation = {
        param_name: 'animation',
        keyframeprefix: ''
      };
      if (doc.body.style.animationName) {
        $.f_is_css_animation_supported = true;
      } else {
        domPrefixes = 'Webkit Moz O ms Khtml'.split(' ');
        for (j = 0, len = domPrefixes.length; j < len; j++) {
          pfx = domPrefixes[j];
          if (doc.body.style[pfx + 'AnimationName'] != null) {
            $.css_animation.param_name = pfx + 'Animation';
            $.css_animation.keyframeprefix = '-' + pfx.toLowerCase() + '-';
            $.f_is_css_animation_supported = true;
            break;
          }
        }
      }
    }
    return $.f_is_css_animation_supported;
  };
  $.fn.css_animate = function(pH) {
    var animation, fallback, keyframes, name, on_finish, ref1, style_el;
    name = pH.name, animation = pH.animation, keyframes = pH.keyframes, fallback = pH.fallback, on_finish = pH.on_finish;
    if ($.css_animation_by_name[name]) {
      ref1 = $.css_animation_by_name[name], animation = ref1.animation, keyframes = ref1.keyframes;
    }
    if ($.is_css_animation_supported()) {
      this.css($.css_animation.keyframeprefix + 'animation-fill-mode', 'forwards');
      keyframes = keyframes.replace(/~/g, $.css_animation.keyframeprefix);
      style_el = $('<style>', {
        text: keyframes,
        type: 'text/css'
      });
      style_el.appendTo('head');
      this.css($.css_animation.param_name, animation);
      return this.on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', (function(_this) {
        return function() {
          _this.css($.css_animation.param_name, '');
          return typeof on_finish === "function" ? on_finish() : void 0;
        };
      })(this));
    } else {
      if (fallback != null) {
        return $.when(fallback()).then(function() {
          return typeof on_finish === "function" ? on_finish() : void 0;
        });
      }
    }
  };
  $.fn.stop_css_animation = function() {
    if ($.is_css_animation_supported()) {
      return this.css($.css_animation.param_name, '');
    }
  };
  $.css_animation_by_name = {
    blink: {
      animation: 'blink 0.6s',
      keyframes: "@~keyframes blink { 0%,            33.34%,         66.68%,           100% {opacity: 1} 16.67%,           50.01%,          83.35%         {opacity: 0.5} }"
    },
    shake: {
      animation: 'shake 0.4s',
      keyframes: "@~keyframes shake { 0%, 100% {~transform: translateX(0)} 20%, 60% {~transform: translateX(-5px)} 40%, 80% {~transform: translateX(5px)} }"
    },
    bounceIn: {
      animation: 'bounceIn .2s ease-out',
      keyframes: "@~keyframes bounceIn { 0% { opacity:0; ~transform-origin: 40px -30px; ~transform:scale(.2); } 100% { opacity:1; ~transform-origin: 40px -30px; ~transform:scale(1); } }"
    }
  };
  $.key = {
    Enter: 13,
    Esc: 27,
    Down: 40,
    Up: 38,
    Left: 37,
    Right: 39,
    Tab: 9,
    Backspace: 8
  };
  $.fn.focusEnd = function() {
    var last_children, pos, range, sel, text_nodes;
    this.focus();
    text_nodes = this.contents().filter(function() {
      return this.nodeType === 3;
    });
    last_children = text_nodes.last();
    if (last_children.text() === ' ') {
      last_children.remove();
    }
    last_children = text_nodes.last();
    pos = last_children.text().length;
    if (pos) {
      range = doc.createRange();
      sel = win.getSelection();
      range.setStart(last_children[0], pos);
      range.collapse(true);
      sel.removeAllRanges();
      sel.addRange(range);
    }
    return this;
  };
  $.fn.hitTest = function(x, y) {
    var bounds;
    bounds = this.offset();
    bounds.right = bounds.left + this.outerWidth();
    bounds.bottom = bounds.top + this.outerHeight();
    return x >= bounds.left && x <= bounds.right && y >= bounds.top && y <= bounds.bottom;
  };
  $.fn.o = function(obj) {
    if (obj) {
      return this.data({
        o: obj
      });
    } else {
      return this.data('o');
    }
  };
  $.run_after = function(delay, fn) {
    return setTimeout(fn, delay);
  };
  $.run_every = function(delay, fn) {
    return setInterval(fn, delay);
  };
  $.fn.hl = function(pH) {
    if (pH == null) {
      pH = {};
    }
    return this.queue((function(_this) {
      return function() {
        var end_color, wasBgColor;
        wasBgColor = _this.css('backgroundColor');
        if (wasBgColor === 'transparent' || wasBgColor === "rgba(0, 0, 0, 0)") {
          wasBgColor = 'white';
        }
        end_color = pH.end_color || wasBgColor;
        _this.css({
          backgroundColor: '#FFF2BE'
        });
        _this.animate({
          backgroundColor: end_color
        }, 1000, function() {
          return _this.css({
            backgroundColor: ''
          });
        });
        return _this.dequeue();
      };
    })(this));
  };
  $.fn.outerHTML = function() {
    return this.clone().wrap('<b>').parent().html();
  };
  win.Hub = (function() {
    function Hub(flags) {
      var flag, msg;
      if (flags == null) {
        flags = {};
      }
      this.docsH = {};
      this.once_fns = {};
      for (msg in flags) {
        flag = flags[msg];
        this.prepare(msg, flag);
      }
    }

    Hub.prototype.fire = function() {
      var args, dfrd, fn, j, l, len, len1, msg, msg_str, ref1, ref2, ref3;
      msg_str = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      dfrd = new $.Deferred();
      ref1 = this.get_msgs(msg_str);
      for (j = 0, len = ref1.length; j < len; j++) {
        msg = ref1[j];
        if ((ref2 = this.docsH[msg]) != null) {
          ref2.fire.apply(ref2, [dfrd].concat(slice.call(args)));
        }
        if (this.once_fns[msg]) {
          ref3 = this.once_fns[msg];
          for (l = 0, len1 = ref3.length; l < len1; l++) {
            fn = ref3[l];
            this.docsH[msg].remove(fn);
          }
          this.once_fns[msg] = [];
        }
      }
      if (!dfrd.f_wait_for_resolve) {
        dfrd.resolve();
      }
      return dfrd.promise();
    };

    Hub.prototype.prepare = function(msg, flags) {
      return this.docsH[msg] = $.Callbacks(flags);
    };

    Hub.prototype.on = function(msg_str, fn) {
      var base, j, len, msg, ref1, results;
      ref1 = this.get_msgs(msg_str);
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        msg = ref1[j];
        if ((base = this.docsH)[msg] == null) {
          base[msg] = $.Callbacks();
        }
        results.push(this.docsH[msg].add(fn));
      }
      return results;
    };

    Hub.prototype.once = function(msg_str, fn) {
      var base, base1, j, len, msg, ref1, results;
      ref1 = this.get_msgs(msg_str);
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        msg = ref1[j];
        if ((base = this.docsH)[msg] == null) {
          base[msg] = $.Callbacks();
        }
        this.docsH[msg].add(fn);
        if ((base1 = this.once_fns)[msg] == null) {
          base1[msg] = [];
        }
        results.push(this.once_fns[msg].push(fn));
      }
      return results;
    };

    Hub.prototype.off = function(msg_str, fn) {
      var j, len, msg, ref1, ref2, results;
      ref1 = this.get_msgs(msg_str);
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        msg = ref1[j];
        if (fn) {
          this.docsH[msg].remove(fn);
          results.push((ref2 = this.once_fns[msg]) != null ? ref2.pull(fn) : void 0);
        } else {
          this.docsH[msg].empty();
          results.push(this.once_fns[msg] = []);
        }
      }
      return results;
    };

    Hub.prototype.get_msgs = function(msg_str) {
      return msg_str.trim().split(/\s+/);
    };

    Hub.prototype.destroy = function() {
      return this.docsH = null;
    };

    return Hub;

  })();
  win.SynsAndFormsBlock = (function() {
    function SynsAndFormsBlock(pH) {
      var add_synonym, calibrate, char, end_part, form, forms, i, j, l, last_li, len, len1, len2, li, o, parent, ref1, ul, word, zIndex;
      this.keyword = pH.keyword, this.wordsH = pH.wordsH, this.target = pH.target, calibrate = pH.calibrate, zIndex = pH.zIndex, parent = pH.parent, this.hide_on_click_outside = pH.hide_on_click_outside;
      if (parent == null) {
        parent = $('body');
      }
      this.cont = $('<div id="word_forms" class="g_noSelect"><ul></ul></div>');
      this.cont.appendTo(parent);
      ul = this.cont.find('ul');
      ref1 = this.sorted_words();
      for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        word = ref1[i];
        forms = this.wordsH[word].sort();
        li = $("<li><div class='s'>" + word + "</div></li>");
        for (l = 0, len1 = forms.length; l < len1; l++) {
          form = forms[l];
          if (!form) {
            continue;
          }
          for (i = o = 0, len2 = word.length; o < len2; i = ++o) {
            char = word[i];
            if (form[i] !== word[i]) {
              break;
            }
          }
          if (i > 3) {
            end_part = form.substr(i);
            if (end_part.length === 0) {
              end_part = form.substr(i - 2);
            }
            li.append("<div class='i' title='" + form + "'>-" + end_part + "</div>");
          } else {
            li.append("<div class='i'>" + form + "</div>");
          }
        }
        this.append_add_form_btn_to(li);
        li.appendTo(ul);
      }
      last_li = $('<li>');
      add_synonym = $('<div class="s add"> + синонім</div>');
      add_synonym.appendTo(last_li);
      last_li.appendTo(ul);
      this.enable_synonym_menu_for(ul.find('li').children('.s'));
      this.enable_synonym_menu_for(ul.find('li:first').children('.s'), {
        main_form: true
      });
      this.enable_form_menu_for(ul.find('li').children('.i:not(.add)'));
      this.cont.align_to(this.target, 'left-bottom', calibrate);
      this.cont.css({
        zIndex: zIndex
      });
      this.hub = new Hub;
      this.editing_item = null;
      this.requests = [];
      this.controller();
    }

    SynsAndFormsBlock.prototype.append_add_form_btn_to = function(el) {
      var add_form_btn;
      add_form_btn = $('<div class="i add" title="Додати форму"> +</div>');
      return add_form_btn.appendTo(el);
    };

    SynsAndFormsBlock.prototype.save_current_active_action = function() {
      var action, f_form_editing, f_form_is_same_as_main, text;
      if (this.editing_item) {
        text = this.editing_item.text();
        f_form_editing = this.editing_item.is('.i');
        f_form_is_same_as_main = f_form_editing && text === this.editing_item.data('main_form').text();
        action = f_form_editing && !f_form_is_same_as_main || !f_form_editing && text ? 'save' : 'cancel';
        return this.editing_item.trigger(action);
      }
    };

    SynsAndFormsBlock.prototype.is_saved = function() {
      var dfrd;
      dfrd = new $.Deferred();
      $.when.apply($, this.requests).done((function(_this) {
        return function() {
          return $.run_after(250, function() {
            var ref1;
            if (!((ref1 = _this.error_popup) != null ? ref1.is_active() : void 0)) {
              return dfrd.resolve();
            }
          });
        };
      })(this));
      return dfrd;
    };

    SynsAndFormsBlock.prototype.controller = function() {
      this.cont.on('mousedown', '.s.add', (function(_this) {
        return function(e) {
          var add_btn_li, div, new_synonym, word_div;
          div = $(e.currentTarget);
          if (_this.editing_item && _this.editing_item.is('.s') && !_this.editing_item.text()) {
            e.preventDefault();
            return true;
          }
          _this.save_current_active_action();
          add_btn_li = div.closest('li');
          new_synonym = $('<li>').hide();
          word_div = $('<div class="s editing"></div>').appendTo(new_synonym).make_editable().enable_remove_html_on_paste();
          new_synonym.insertBefore(add_btn_li);
          new_synonym.slideDown('fast', function() {
            return word_div.focus();
          });
          return _this.editing_item = word_div;
        };
      })(this));
      this.cont.on('keydown', '.editing', (function(_this) {
        return function(e) {
          var ref1, word_div;
          word_div = $(e.currentTarget);
          if ((ref1 = _this.error_popup) != null) {
            ref1.hide_and_destroy();
          }
          switch (e.which) {
            case $.key.Enter:
              word_div.trigger({
                type: 'save',
                adding_next: !e.ctrlKey
              });
              break;
            case $.key.Esc:
              word_div.trigger({
                type: 'cancel'
              });
              break;
            default:
              return true;
          }
          return false;
        };
      })(this));
      this.cont.on('mouseup', '.editing', (function(_this) {
        return function(e) {
          var word_div;
          word_div = $(e.currentTarget);
          return _this.editing_item = word_div;
        };
      })(this));
      this.cont.on('save', '.s.editing', (function(_this) {
        return function(e) {
          var pH, ref1, request, word, word_div;
          word_div = $(e.currentTarget);
          word = word_div.text().toLowerCase().strip();
          if (!word) {
            if ((ref1 = _this.editing_item) != null) {
              ref1.trigger('cancel');
            }
            return false;
          }
          pH = {
            word: word,
            synonym_for: _this.keyword
          };
          request = $.json('/ajax/save_word', pH, function(res) {
            var end_color, ref2, ref3, start_color;
            if (res.added_word) {
              word_div.removeClass('editing').make_editable(false);
              word_div.text(res.added_word);
              start_color = '#FFF79B';
              end_color = '#EEEEEE';
              word_div.css({
                backgroundColor: start_color
              }).animate({
                backgroundColor: end_color
              }, 1000, function() {
                var li;
                word_div.css({
                  backgroundColor: ''
                });
                li = word_div.closest('li');
                return _this.append_add_form_btn_to(li);
              });
              _this.enable_synonym_menu_for(word_div);
              if ((ref2 = _this.editing_item) != null ? ref2.is(word_div) : void 0) {
                _this.editing_item = null;
              }
              _this.hub.fire('updated');
              return _this.hub.fire('synonym_saved', res.added_word);
            } else if (res.error) {
              if (_this.editing_item) {
                if (!_this.editing_item.is(word_div)) {
                  $.run_after(100, function() {
                    _this.editing_item.trigger({
                      type: 'cancel'
                    });
                    _this.editing_item = word_div;
                    return _this.editing_item.focus().focusEnd();
                  });
                }
                if ((ref3 = _this.error_popup) != null) {
                  ref3.destroy();
                }
                _this.error_popup = new Popup({
                  target: word_div,
                  html: res.error,
                  calibrate: {
                    x: 0,
                    y: 0
                  },
                  size: 'small',
                  hide_and_destroy_on_click: true
                });
                return _this.error_popup.show();
              }
            }
          });
          return _this.requests.push(request);
        };
      })(this));
      this.cont.on('cancel', '.s.editing', (function(_this) {
        return function(e) {
          var li, word_div;
          word_div = $(e.currentTarget);
          word_div.make_editable(false);
          if (!word_div.data('was')) {
            li = word_div.closest('li');
            li.slideUp(function() {
              return li.remove();
            });
          }
          return _this.editing_item = null;
        };
      })(this));
      this.cont.on('delete', '.s', (function(_this) {
        return function(e) {
          var pH, word_div;
          word_div = $(e.currentTarget);
          pH = {
            word: word_div.text().toLowerCase(),
            keyword: _this.keyword
          };
          return $.json('/ajax/delete_synonym', pH, function(res) {
            var li;
            if (res.ok) {
              li = word_div.closest('li');
              li.slideUp(function() {
                return li.remove();
              });
              _this.hub.fire('updated');
              return _this.hub.fire('synonym_deleted', pH.word);
            }
          });
        };
      })(this));
      this.cont.on('mousedown', '.i.add', (function(_this) {
        return function(e) {
          var add_btn, main_form, main_form_text, new_form_i, word_li;
          add_btn = $(e.currentTarget);
          word_li = add_btn.closest('li');
          main_form = word_li.children('div:first');
          main_form_text = main_form.text().toLowerCase();
          if (_this.editing_item && _this.editing_item.next().is(add_btn) && _this.editing_item.text().toLowerCase() === main_form_text) {
            e.preventDefault();
            return true;
          }
          _this.save_current_active_action();
          new_form_i = $("<div class='i'>").appendTo(word_li);
          new_form_i.insertBefore(add_btn);
          new_form_i.data('main_form', main_form);
          new_form_i.addClass('animating').css({
            width: 4,
            paddingLeft: 0
          });
          new_form_i.animate({
            width: main_form.width(),
            paddingLeft: 7
          }, 'fast', function() {
            return new_form_i.removeClass('animating').addClass('editing').css({
              width: '',
              paddingLeft: ''
            }).text(main_form.text()).make_editable().enable_remove_html_on_paste();
          });
          return _this.editing_item = new_form_i;
        };
      })(this));
      this.cont.on('save', '.i.editing', (function(_this) {
        return function(e) {
          var main_form, main_form_text, pH, ref1, request, word, word_i, word_li;
          word_i = $(e.currentTarget);
          word_li = word_i.closest('li');
          main_form = word_li.children('div:first');
          main_form_text = main_form.text().toLowerCase();
          word = word_i.text().toLowerCase().strip();
          if (!word) {
            if ((ref1 = _this.editing_item) != null) {
              ref1.trigger('cancel');
            }
            return false;
          }
          pH = {
            word: word,
            form_for: main_form_text
          };
          request = $.json('/ajax/save_form', pH, function(res) {
            var char, end_color, end_part, i, j, len, ref2, ref3, start_color;
            if (res.added_form) {
              word = res.added_form;
              word_i.removeClass('editing').make_editable(false);
              for (i = j = 0, len = word.length; j < len; i = ++j) {
                char = word[i];
                if (main_form_text[i] !== word[i]) {
                  break;
                }
              }
              if (i > 3) {
                end_part = word.substr(i);
                word_i.text('-' + end_part);
              } else {
                word_i.text(word);
              }
              word_i.attr('title', word);
              start_color = '#FFF79B';
              end_color = '#EEEEEE';
              word_i.css({
                backgroundColor: start_color
              }).animate({
                backgroundColor: end_color
              }, 1000, function() {
                return word_i.css({
                  backgroundColor: ''
                });
              });
              _this.enable_form_menu_for(word_i);
              if ((ref2 = _this.editing_item) != null ? ref2.is(word_i) : void 0) {
                _this.editing_item = null;
              }
              if (e.adding_next) {
                word_li.find('.i.add').mousedown();
              }
              _this.hub.fire('updated');
              return _this.hub.fire('form_saved', word);
            } else if (res.error) {
              if (_this.editing_item) {
                if (!_this.editing_item.is(word_i)) {
                  $.run_after(100, function() {
                    _this.editing_item.trigger({
                      type: 'cancel'
                    });
                    _this.editing_item = word_i;
                    return _this.editing_item.focus().focusEnd();
                  });
                }
                if ((ref3 = _this.error_popup) != null) {
                  ref3.destroy();
                }
                _this.error_popup = new Popup({
                  target: word_i,
                  html: res.error,
                  calibrate: {
                    x: 0,
                    y: 0
                  },
                  size: 'small',
                  hide_and_destroy_on_click: true
                });
                return _this.error_popup.show();
              }
            }
          });
          return _this.requests.push(request);
        };
      })(this));
      this.cont.on('cancel', '.i.editing', (function(_this) {
        return function(e) {
          var word_i;
          word_i = $(e.currentTarget);
          word_i.removeClass('editing').make_editable(false);
          if (!word_i.data('was')) {
            word_i.addClass('animating').css({
              width: word_i.width()
            }).empty();
            word_i.animate({
              width: 4,
              paddingLeft: 0
            }, 'fast', function() {
              return word_i.remove();
            });
          }
          return _this.editing_item = null;
        };
      })(this));
      this.cont.on('delete', '.i', (function(_this) {
        return function(e) {
          var main_form, pH, word_i, word_li;
          word_i = $(e.currentTarget);
          word_li = word_i.closest('li');
          main_form = word_li.children('div:first');
          pH = {
            form: word_i.attr('title') || word_i.text().toLowerCase(),
            main_form: main_form.text().toLowerCase()
          };
          return $.json('/ajax/delete_form', pH, function(res) {
            if (res.ok) {
              word_i.addClass('animating').css({
                width: word_i.width()
              }).empty();
              word_i.animate({
                width: 4,
                paddingLeft: 0
              }, 'fast', function() {
                return word_i.remove();
              });
              _this.hub.fire('updated');
              return _this.hub.fire('form_deleted', pH.form);
            }
          });
        };
      })(this));
      this.cont.on('mousedown', (function(_this) {
        return function(e) {
          var el, f_md_on_add_btn, f_md_on_the_current_editing_item;
          el = $(e.target);
          f_md_on_the_current_editing_item = el.is(_this.editing_item);
          f_md_on_add_btn = el.is('.add');
          if (!(f_md_on_add_btn || f_md_on_the_current_editing_item)) {
            return _this.save_current_active_action();
          }
        };
      })(this));
      return $doc.on('mousedown.SynsAndFormsBlock', (function(_this) {
        return function(e) {
          if (e.click_was_outside(_this.cont)) {
            _this.save_current_active_action();
            if (_this.hide_on_click_outside) {
              return _this.hide({
                with_fade: true
              });
            }
          }
        };
      })(this));
    };

    SynsAndFormsBlock.prototype.enable_synonym_menu_for = function(_for, _pH) {
      var special, type;
      if (_pH == null) {
        _pH = {};
      }
      type = '';
      special = '';
      if (_pH.main_form) {
        type = ':no_delete';
        special = 'Required';
      }
      return cMenu.enableFor(_for, 'synonym' + type, {
        special: special
      }, {
        o: function() {
          return cMenu.currentTarget;
        },
        on_edit: function(b) {
          return b.trigger('dblclick');
        },
        on_delete: function(b) {
          return b.trigger({
            type: 'delete',
            save: true
          });
        }
      });
    };

    SynsAndFormsBlock.prototype.enable_form_menu_for = function(_for) {
      return cMenu.enableFor(_for, 'form', {}, {
        o: function() {
          return cMenu.currentTarget;
        },
        on_edit: function(b) {
          return b.trigger('dblclick');
        },
        on_delete: function(b) {
          return b.trigger({
            type: 'delete',
            save: true
          });
        }
      });
    };

    SynsAndFormsBlock.prototype.sorted_words = function() {
      var arr, word;
      arr = (function() {
        var results;
        results = [];
        for (word in this.wordsH) {
          if (word !== this.keyword) {
            results.push(word);
          }
        }
        return results;
      }).call(this);
      return [this.keyword].concat(arr.sort());
    };

    SynsAndFormsBlock.prototype.is_visible = function() {
      return this.cont.is(':visible');
    };

    SynsAndFormsBlock.prototype.show = function() {
      return this.cont.fadeIn('fast');
    };

    SynsAndFormsBlock.prototype.hide = function(pH) {
      var ref1;
      if (pH == null) {
        pH = {};
      }
      if ((ref1 = this.editing_item) != null) {
        ref1.trigger('cancel');
      }
      if (pH.with_fade) {
        return this.cont.fadeOut('fast');
      } else {
        return this.cont.hide();
      }
    };

    SynsAndFormsBlock.prototype.destroy = function() {
      var ref1;
      $doc.off('mouseup.SynsAndFormsBlock');
      this.cont.remove();
      if ((ref1 = this.error_popup) != null) {
        ref1.destroy();
      }
      return this.hub.destroy();
    };

    return SynsAndFormsBlock;

  })();
  win.SuggestionsBlock = (function() {
    function SuggestionsBlock(pH) {
      var parent;
      if (pH == null) {
        pH = {};
      }
      this.target = pH.target, this.calibrate = pH.calibrate, parent = pH.parent;
      if (parent == null) {
        parent = $('body');
      }
      if (this.calibrate == null) {
        this.calibrate = {};
      }
      this.cur_li = $();
      this.items_count = 0;
      this.div = $('<div id="SuggestionsBlock"><ul></ul></div>');
      this.div.appendTo(parent);
      this.ul = this.div.find('ul');
      this.hub = new Hub;
      this.controller();
    }

    SuggestionsBlock.prototype.controller = function() {
      this.align();
      this.ul.on('mousedown', 'li', (function(_this) {
        return function(e) {
          var li;
          li = $(e.currentTarget);
          _this.hide();
          _this.hub.fire('li_clicked', li);
          _this.ul.empty();
          _this.items_count = 0;
          return $.run_after(50, function() {
            return _this.make_suggestions_for_next_group();
          });
        };
      })(this));
      this.ul.on('mouseenter mouseleave', 'li', (function(_this) {
        return function(e) {
          var li;
          li = $(e.currentTarget);
          _this.ul.find('li').removeClass('cur');
          if (e.type === 'mouseenter') {
            return li.addClass('cur');
          } else {
            return _this.cur_li.addClass('cur');
          }
        };
      })(this));
      return $doc.on('mouseup.SuggestionsBlock', (function(_this) {
        return function(e) {
          if (e.click_was_outside(_this.div)) {
            return _this.hub.fire('clicked_outside', e).then(function() {
              return _this.hide({
                with_fade: true
              });
            });
          }
        };
      })(this));
    };

    SuggestionsBlock.prototype.use_cur_li = function() {
      return this.cur_li.mousedown();
    };

    SuggestionsBlock.prototype.set_cur_li = function(li) {
      this.cur_li.removeClass('cur');
      this.cur_li = li;
      return this.cur_li.addClass('cur');
    };

    SuggestionsBlock.prototype.focus_next = function() {
      var next_li;
      next_li = this.cur_li.next();
      if (next_li[0]) {
        return this.set_cur_li(next_li);
      }
    };

    SuggestionsBlock.prototype.focus_prev = function() {
      var prev_li;
      prev_li = this.cur_li.prev();
      if (prev_li[0]) {
        return this.set_cur_li(prev_li);
      }
    };

    SuggestionsBlock.prototype.align = function() {
      this.div.align_to(this.target, 'left-bottom', this.calibrate);
      return this;
    };

    SuggestionsBlock.prototype.setup_data = function(dataH) {
      this.smart_groups = dataH.smart_groups;
      this.suggestions_data = dataH.suggestions;
      this.cur_smart_word_index = -1;
      this.cur_smart_group_n = -1;
      this.cur_hl_words_count = 1;
      return this.make_suggestions_for_next_group();
    };

    SuggestionsBlock.prototype.clear = function() {
      this.items_count = 0;
      this.ul.empty();
      return this.smart_groups = {
        words_to_results: 0,
        results: 0
      };
    };

    SuggestionsBlock.prototype.make_suggestions_for_next_group = function() {
      var j, len, li, name, result_index, suggestion_id, suggestions_ids, tmp_ul;
      this.cur_smart_group_n++;
      this.cur_smart_word_index += this.cur_hl_words_count;
      if (this.cur_smart_word_index < this.smart_words_count()) {
        result_index = this.smart_groups.words_to_results[this.cur_smart_word_index];
        suggestions_ids = this.smart_groups.results[result_index];
        this.items_count = suggestions_ids.length;
        tmp_ul = $('<ul>');
        for (j = 0, len = suggestions_ids.length; j < len; j++) {
          suggestion_id = suggestions_ids[j];
          name = this.suggestions_data[suggestion_id];
          li = $("<li>" + name + "</li>");
          li.data({
            id: suggestion_id
          });
          li.appendTo(tmp_ul);
        }
        this.ul.empty().append(tmp_ul.children());
        tmp_ul.remove();
        this.set_cur_li(this.ul.find('li:first'));
        return true;
      } else {
        return false;
      }
    };

    SuggestionsBlock.prototype.smart_words_count = function() {
      return this.smart_groups.words_to_results.length;
    };

    SuggestionsBlock.prototype.smart_groups_count = function() {
      return this.smart_groups.results.length;
    };

    SuggestionsBlock.prototype.hl_target_word = function() {
      var hl_words, i, j, other_words, ref1, ref2, res_html, res_index, words;
      this.cur_hl_words_count = 1;
      res_index = this.smart_groups.words_to_results[this.cur_smart_word_index];
      for (i = j = ref1 = this.cur_smart_word_index + 1, ref2 = this.smart_words_count(); ref1 <= ref2 ? j < ref2 : j > ref2; i = ref1 <= ref2 ? ++j : --j) {
        if (this.smart_groups.words_to_results[i] === res_index) {
          this.cur_hl_words_count++;
        } else {
          break;
        }
      }
      if (this.cur_smart_group_n < this.smart_groups_count() - 1) {
        words = this.target.text().split(/\s+|(?=\+)/);
        hl_words = words.slice(0, this.cur_hl_words_count).join(' ');
        other_words = words.slice(this.cur_hl_words_count).join(' ');
        res_html = ("<u>" + hl_words + "</u> ") + other_words.replace(/\s+$/, '&#160;');
        if (this.target.html() !== res_html) {
          this.target.html(res_html);
          return this.target.focusEnd();
        }
      } else {
        if (this.target.find('u')[0]) {
          if (this.target.html() !== this.target.text()) {
            this.target.text(this.target.text().strip());
            return this.target.focusEnd();
          }
        }
      }
    };

    SuggestionsBlock.prototype.has_items = function() {
      return this.items_count > 0;
    };

    SuggestionsBlock.prototype.is_visible = function() {
      return this.div.is(':visible');
    };

    SuggestionsBlock.prototype.show = function() {
      this.hl_target_word();
      return this.div.fadeIn(50);
    };

    SuggestionsBlock.prototype.hide = function(pH) {
      if (pH == null) {
        pH = {};
      }
      this.div.stop();
      if (pH.with_fade) {
        return this.div.fadeOut('fast');
      } else {
        return this.div.hide();
      }
    };

    SuggestionsBlock.prototype.destroy = function() {
      $doc.off('.SuggestionsBlock');
      this.div.remove();
      return this.hub.destroy();
    };

    return SuggestionsBlock;

  })();
  win.Popup = (function() {
    Popup.total_shown = 0;

    function Popup(pH) {
      var button, buttons, buttons_part, cls_part, id, j, len, ref1, width;
      id = pH.id, this.target = pH.target, width = pH.width, this.hide_on_click = pH.hide_on_click, this.hide_on_click_outside = pH.hide_on_click_outside, this.hide_and_destroy_on_click = pH.hide_and_destroy_on_click, this.hide_and_destroy_on_click_outside = pH.hide_and_destroy_on_click_outside, this.type = pH.type, this.calibrate = pH.calibrate, this.arr_calibrate = pH.arr_calibrate, buttons = pH.buttons, this.hint_id = pH.hint_id, this.save_as_shown_for_user_on_OK = pH.save_as_shown_for_user_on_OK, this.ignore_click_on = pH.ignore_click_on, this.manual_align = pH.manual_align, this.block_elements = pH.block_elements, this.hide_and_destroy_after = pH.hide_and_destroy_after, this.show_only_if_no_other_popup_shown = pH.show_only_if_no_other_popup_shown;
      if (width == null) {
        width = '';
      }
      if (this.type == null) {
        this.type = 'right';
      }
      this.div = $('<div class="popup"><div class="text_cont"></div><div class="arr"></div></div>').appendTo('body');
      this.div.o(this);
      this.div.attr({
        id: id
      }).addClass(this.type).addClass(pH.size);
      this.text_cont = this.div.find('.text_cont');
      if (pH.addClass) {
        this.text_cont.addClass(pH.addClass);
      }
      this.text_cont.html(pH.html);
      this.div.css({
        width: width
      });
      this.arr = this.div.find('.arr');
      this.on_mousedown;
      buttons_part = '';
      if (buttons) {
        ref1 = buttons.split(/, */);
        for (j = 0, len = ref1.length; j < len; j++) {
          button = ref1[j];
          cls_part = '';
          button = button.replace(/\.(\w+)$/, function(m, cls) {
            cls_part = " class='" + cls + "'";
            return '';
          });
          buttons_part += "<b><i" + cls_part + ">" + button + "</i></b>";
        }
        buttons_part = "<div class='buttons noSelect'>" + buttons_part + "</div>";
        this.text_cont.after(buttons_part);
      }
      this.hub = new Hub({
        init: 'once'
      });
      this.f_active = true;
      this.controller();
    }

    Popup.prototype.controller = function() {
      var action, f_for_click_outside, required_text;
      action = (function() {
        switch (false) {
          case !this.hide_on_click:
          case !this.hide_on_click_outside:
            return this.hide;
          case !this.hide_and_destroy_on_click:
          case !this.hide_and_destroy_on_click_outside:
            return this.hide_and_destroy;
        }
      }).call(this);
      f_for_click_outside = this.hide_on_click_outside || this.hide_and_destroy_on_click_outside;
      if (action) {
        this.on_mousedown = (function(_this) {
          return function(e) {
            var f_ignore_click_on_ok;
            f_ignore_click_on_ok = _this.ignore_click_on && e.click_was_outside(_this.ignore_click_on) || !_this.ignore_click_on;
            if (f_for_click_outside && e.click_was_outside(_this.div) && f_ignore_click_on_ok || !f_for_click_outside) {
              return action.call(_this);
            } else {
              return $doc.one('mousedown', _this.on_mousedown);
            }
          };
        })(this);
      }
      this.div.find('.buttons').on('click', 'b', (function(_this) {
        return function(e) {
          var b, i, key;
          b = $(e.currentTarget);
          i = b.find('i');
          key = i.attr('class') || b.text().replace(' ', '_');
          return _this.hub.fire('btn_' + key, b);
        };
      })(this));
      if (this.hint_id && this.save_as_shown_for_user_on_OK) {
        this.hub.on('btn_Ok', (function(_this) {
          return function(e, btn) {
            if (btn != null ? btn.is('.disabled') : void 0) {
              return;
            }
            _this.save_as_shown_for_user();
            return _this.hide_and_destroy();
          };
        })(this));
      }
      if (this.block_elements) {
        this.hub.on('shown', (function(_this) {
          return function() {
            var element, j, len, ref1;
            _this.block_elements = (function() {
              var j, len, ref1, results;
              ref1 = this.block_elements;
              results = [];
              for (j = 0, len = ref1.length; j < len; j++) {
                element = ref1[j];
                if (!(element instanceof $)) {
                  element = $(element);
                }
                results.push(element);
              }
              return results;
            }).call(_this);
            ref1 = _this.block_elements;
            for (j = 0, len = ref1.length; j < len; j++) {
              element = ref1[j];
              _this.block_element(element);
            }
            return _this.hub.on('hide destroy', function() {
              var l, len1, ref2, results;
              ref2 = _this.block_elements;
              results = [];
              for (l = 0, len1 = ref2.length; l < len1; l++) {
                element = ref2[l];
                if (!(element instanceof $)) {
                  element = $(element);
                }
                results.push(element.off('.Popup'));
              }
              return results;
            });
          };
        })(this));
      }
      required_text = this.text_cont.find('.required');
      if (required_text[0]) {
        this.get_btn('Ok').addClass('disabled');
        this.hub.on('btn_Ok', (function(_this) {
          return function(e, btn) {
            if (btn != null ? btn.is('.disabled') : void 0) {
              return required_text.blink();
            }
          };
        })(this));
      }
      if (this.hide_and_destroy_after) {
        if (this.t_hide_delay) {
          clearTimeout(this.t_hide_delay);
          this.t_hide_delay = null;
        }
        this.t_hide_delay = $.run_after(this.hide_and_destroy_after, (function(_this) {
          return function() {
            _this.hide_and_destroy();
            return _this.t_hide_delay = null;
          };
        })(this));
      }
      if (this.on_mousedown) {
        this.hub.on('shown', (function(_this) {
          return function() {
            var st_callback;
            st_callback = function() {
              return $doc.one('mousedown', _this.on_mousedown);
            };
            return setTimeout(st_callback, 200);
          };
        })(this));
        return this.hub.on('hide destroy', (function(_this) {
          return function() {
            return $doc.off('mousedown', _this.on_mousedown);
          };
        })(this));
      }
    };

    Popup.prototype.save_as_shown_for_user = function() {
      if (g_db) {
        if (!this.was_shown_for_user()) {
          return $.json('/ajax/hint_shown', {
            id: this.hint_id
          }, (function(_this) {
            return function() {
              var base;
              if ((base = g_db.user_data).hints_shown == null) {
                base.hints_shown = [];
              }
              return g_db.user_data.hints_shown.push(_this.hint_id);
            };
          })(this));
        }
      }
    };

    Popup.prototype.block_element = function(element) {
      var evnt, instead_of_click, j, len, ref1, results;
      instead_of_click = (function(_this) {
        return function(e) {
          e.stopImmediatePropagation();
          if (e.type === 'mousedown' || e.type === 'contextmenu') {
            _this.div.css_animate({
              animation: 'blink_bg_color 0.5s',
              keyframes: "@~keyframes blink_bg_color { 0%,            33.34%,         66.68%,           100% {background-color:#FFF3C8} 16.67%,           50.01%,          83.35%         {background-color:#FFFAE8} }"
            });
          }
          return false;
        };
      })(this);
      ref1 = ['mousedown', 'click', 'mouseup', 'contextmenu'];
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        evnt = ref1[j];
        element.on(evnt + '.Popup', instead_of_click);
        results.push(element.make_last_event_handler_to_be_first(evnt));
      }
      return results;
    };

    Popup.prototype.additionally_block_elements = function(els) {
      var el, j, len, results;
      if (!(els instanceof Array)) {
        els = [els];
      }
      results = [];
      for (j = 0, len = els.length; j < len; j++) {
        el = els[j];
        if (!(el instanceof $)) {
          el = $(el);
        }
        this.block_elements.push(el);
        results.push(this.block_element(el));
      }
      return results;
    };

    Popup.prototype.was_shown_for_user = function() {
      var ref1;
      return typeof g_db !== "undefined" && g_db !== null ? (ref1 = g_db.user_data.hints_shown) != null ? ref1.includes(this.hint_id) : void 0 : void 0;
    };

    Popup.prototype.is_active = function() {
      return this.f_active;
    };

    Popup.prototype.is_not_active = function() {
      return !this.is_active();
    };

    Popup.prototype.align = function() {
      var x, y;
      if (this.target == null) {
        console.error("Popup '%s': target undefined ", this.id || this.hint_id);
        return;
      }
      switch (this.type) {
        case 'right':
          this.div.align_to(this.target, 'right-center', this.calibrate);
          this.div.css({
            left: '+=' + this.arr.outerWidth()
          });
          break;
        case 'left':
          this.div.align_to(this.target, 'left-center', this.calibrate);
          this.div.css({
            left: '-=' + (this.div.outerWidth() + this.arr.outerWidth() - 1)
          });
          break;
        case 'top':
          this.div.align_to(this.target, 'center-top', this.calibrate);
          this.div.css({
            top: '-=' + (this.div.outerHeight() + this.arr.outerHeight())
          });
          break;
        case 'bottom':
          this.div.align_to(this.target, 'center-bottom', this.calibrate);
          this.div.css({
            top: '+=' + (this.arr.outerHeight() - 1)
          });
      }
      switch (this.type) {
        case 'left':
        case 'right':
          this.div.css({
            top: '-=' + Math.round(this.div.outerHeight() / 2)
          });
          break;
        case 'top':
        case 'bottom':
          this.div.css({
            left: '-=' + Math.round(this.div.outerWidth() / 2)
          });
      }
      switch (this.type) {
        case 'right':
        case 'left':
          y = Math.round((this.div.outerHeight() - this.arr.outerHeight()) / 2);
          this.arr.css({
            top: y
          });
          break;
        case 'top':
        case 'bottom':
          x = Math.round((this.div.outerWidth() - this.arr.outerWidth()) / 2);
          this.arr.css({
            left: x
          });
      }
      if (this.arr_calibrate) {
        return this.arr.css({
          left: this.arr_calibrate.x,
          top: this.arr_calibrate.y
        });
      }
    };

    Popup.prototype.show = function(pH) {
      if (pH == null) {
        pH = {};
      }
      this.hub.fire('show');
      if (this.is_visible()) {
        return;
      }
      if (this.hint_id && this.was_shown_for_user() && !pH.force) {
        this.destroy();
        return;
      }
      if (this.show_only_if_no_other_popup_shown && this.constructor.total_shown > 0) {
        return;
      }
      this.hub.fire('init');
      this.align();
      if (typeof this.manual_align === "function") {
        this.manual_align();
      }
      this.div.fadeIn('fast', (function(_this) {
        return function() {
          return _this.hub.fire('fadeIn_end');
        };
      })(this));
      this.constructor.total_shown++;
      return this.hub.fire('shown');
    };

    Popup.prototype.hide = function(mode) {
      if (mode == null) {
        mode = 'fast';
      }
      this.hub.fire('hide');
      if (!this.is_visible()) {
        return;
      }
      this.div.stop().fadeOut(mode, (function(_this) {
        return function() {
          _this.div.hide();
          _this.hub.fire('hidden');
          return _this.constructor.total_shown--;
        };
      })(this));
      return $.when(this.div);
    };

    Popup.prototype.is_visible = function() {
      return this.div.css('display') !== 'none';
    };

    Popup.prototype.hide_nofade = function() {
      return this.hide(0);
    };

    Popup.prototype.hide_and_destroy = function(mode) {
      if (mode == null) {
        mode = 'fast';
      }
      return this.hide(mode).then((function(_this) {
        return function() {
          return _this.destroy();
        };
      })(this));
    };

    Popup.prototype.get_btn = function(text) {
      return this.div.find('.buttons b').has("i." + text + ", i:contains(" + text + ")");
    };

    Popup.prototype.activate_hint_hl = function(setH) {
      return $.each(setH, (function(_this) {
        return function(hint_el, hl_objects) {
          var hl_object, on_hover;
          hint_el = _this.text_cont.find(hint_el);
          hint_el.off('.Popup');
          if (hl_objects.length === 1) {
            hl_object = hl_objects;
            return hint_el.on('mouseenter.Popup mouseleave.Popup', function(e) {
              if (e.type === 'mouseenter') {
                return hl_object.addClass('g_hint_hl');
              } else {
                return hl_object.removeClass('g_hint_hl');
              }
            });
          } else {
            on_hover = function() {
              return hl_objects.each(function(i, el) {
                var f_last_item, obj, speed, t_o;
                f_last_item = i === hl_objects.length - 1;
                obj = $(el);
                speed = 130;
                if (t_o) {
                  clearTimeout(t_o);
                  t_o = null;
                }
                t_o = $.run_after(i * speed, (function(_this) {
                  return function() {
                    var st_callback;
                    obj.addClass('g_hint_hl');
                    st_callback = function() {
                      var t_repeat_delay;
                      obj.removeClass('g_hint_hl');
                      if (f_last_item && obj.data('t_o')) {
                        if (t_repeat_delay) {
                          clearTimeout(t_repeat_delay);
                          t_repeat_delay = null;
                        }
                        t_repeat_delay = $.run_after(500, function() {
                          on_hover();
                          return t_repeat_delay = null;
                        });
                        return obj.data({
                          t_repeat_delay: t_repeat_delay
                        });
                      }
                    };
                    setTimeout(st_callback, speed + 20);
                    return t_o = null;
                  };
                })(this));
                return obj.data({
                  t_o: t_o
                });
              });
            };
            return hint_el.on('mouseenter.Popup mouseleave.Popup', function(e) {
              if (e.type === 'mouseenter') {
                return on_hover();
              } else {
                return hl_objects.each(function(i, el) {
                  var obj, t_o, t_repeat_delay;
                  obj = $(el);
                  t_o = obj.data('t_o');
                  if (t_o) {
                    clearTimeout(t_o);
                    t_o = null;
                  }
                  obj.removeData('t_o');
                  t_repeat_delay = obj.data('t_repeat_delay');
                  if (t_repeat_delay) {
                    clearTimeout(t_repeat_delay);
                    t_repeat_delay = null;
                  }
                  return obj.removeData('t_repeat_delay');
                });
              }
            });
          }
        };
      })(this));
    };

    Popup.prototype.move_and_close_with_wnd = function(wnd) {
      if (!(wnd instanceof Wnd)) {
        wnd = wnd.wnd;
      }
      this.div.appendTo(wnd.div);
      return wnd.hub.once('close', (function(_this) {
        return function() {
          if (_this.is_active()) {
            return _this.hide_nofade();
          }
        };
      })(this));
    };

    Popup.prototype.destroy = function() {
      if (!this.f_active) {
        return;
      }
      if (this.t_hide_delay) {
        clearTimeout(this.t_hide_delay);
        this.t_hide_delay = null;
      }
      this.hub.fire('destroy');
      this.f_active = false;
      this.div.remove();
      return this.hub.destroy();
    };

    return Popup;

  })();
  win.MyUFDSelect = (function() {
    function MyUFDSelect(pH) {
      var options;
      this.select = pH.select, options = pH.options, this.do_on_Enter = pH.do_on_Enter, this.do_on_Esc = pH.do_on_Esc;
      if (options == null) {
        options = {
          wrapperEl: 'b',
          listMaxVisible: 15,
          calculateZIndex: true,
          addEmphasis: true
        };
      }
      this.select.ufd(options);
      this.ufd = this.select.data('ufd');
      this.hub = new Hub;
      this.controller();
    }

    MyUFDSelect.prototype.controller = function() {
      this.ufd.input.on('keydown', (function(_this) {
        return function(e) {
          switch (e.which) {
            case $.key.Down:
              if (!_this.dropdown_is_visible()) {
                _this.ufd.filter(true);
                $.run_after(2, function() {
                  return _this.ufd.showList();
                });
              } else {

              }
              _this.ufd.selectNext();
              e.stopImmediatePropagation();
              break;
            case $.key.Up:
              if (!_this.dropdown_is_visible()) {
                _this.ufd.filter(true);
                $.run_after(2, function() {
                  return _this.ufd.showList();
                });
              } else {

              }
              _this.ufd.selectPrev();
              e.stopImmediatePropagation();
              break;
            case $.key.Left:
            case $.key.Right:
              e.stopImmediatePropagation();
              break;
            case $.key.Enter:
              if (typeof _this.do_on_Enter === "function") {
                _this.do_on_Enter(e);
              }
              break;
            case $.key.Esc:
              if (typeof _this.do_on_Esc === "function") {
                _this.do_on_Esc(e);
              }
          }
          return true;
        };
      })(this));
      this.ufd.input.on('keyup', (function(_this) {
        return function(e) {
          switch (e.which) {
            case $.key.Down:
            case $.key.Up:
            case $.key.Left:
            case $.key.Right:
              e.stopImmediatePropagation();
              break;
            case $.key.Enter:
              if (_this.do_on_Enter) {
                e.stopImmediatePropagation();
              }
              break;
            case $.key.Esc:
              if (_this.do_on_Esc) {
                e.stopImmediatePropagation();
              }
          }
          return true;
        };
      })(this));
      this.ufd.input.make_last_event_handler_to_be_first('keydown');
      this.ufd.input.make_last_event_handler_to_be_first('keyup');
      return this.ufd.listScroll.on('scroll', (function(_this) {
        return function() {
          return _this.hub.fire('scroll');
        };
      })(this));
    };

    MyUFDSelect.prototype.fix_height = function() {
      var h, list_scroll;
      list_scroll = this.ufd.listScroll;
      h = parseInt(list_scroll.css('height'));
      return list_scroll.css({
        'max-height': h,
        height: ''
      });
    };

    MyUFDSelect.prototype.ready = function() {
      this.select.delay(200);
      return $.when(this.select);
    };

    MyUFDSelect.prototype.visible_suggestions_count = function() {
      return this.ufd.visibleCount;
    };

    MyUFDSelect.prototype.shows_no_suggestions = function() {
      return this.ufd.visibleCount === 0;
    };

    MyUFDSelect.prototype.dropdown_is_visible = function() {
      return this.ufd.listVisible();
    };

    MyUFDSelect.prototype.related_option_for = function(li) {
      var index;
      index = li.attr('name');
      return this.select.find('option').eq(index);
    };

    MyUFDSelect.prototype.hide_dropdown = function() {
      return this.ufd.hideList();
    };

    MyUFDSelect.prototype.delete_item = function(li) {
      this.fix_height();
      return li.slideUp('fast', (function(_this) {
        return function() {
          _this.related_option_for(li).remove();
          li.remove();
          _this.get_list_elements().each(function(index) {
            return $(this).attr('name', index);
          });
          _this.update();
          return _this.ufd.showList();
        };
      })(this));
    };

    MyUFDSelect.prototype.get_list_elements = function() {
      return this.ufd.listWrapper.find('li');
    };

    MyUFDSelect.prototype.update = function() {
      this.ufd.changeOptions();
      return this.hub.fire('update');
    };

    MyUFDSelect.prototype.destroy = function() {
      this.hub.destroy();
      return this.select.ufd('destroy');
    };

    return MyUFDSelect;

  })();
  win.RadShade = (function() {
    function RadShade(pH) {
      var set_spot;
      if (pH == null) {
        pH = {};
      }
      set_spot = pH.set_spot;
      this.W = 6000;
      this.H = 4000;
      this.build_content();
      this.div.o(this);
      if (set_spot) {
        this.set_spot(set_spot);
      }
    }

    RadShade.prototype.build_content = function() {
      var defs;
      this.div = $('<div class="g_RadShade"></div>').appendTo('body');
      this.div.svg({
        settings: {
          width: this.W,
          height: this.H
        }
      });
      this.svg = this.div.svg('get');
      defs = this.svg.defs();
      this.grad = $(this.svg.radialGradient(defs, 'grad', [[0.1, '#000', 0], [0.6, '#000', 0.5]], '0%', '0%', '30%', null, null, {
        spreadMethod: 'pad'
      }));
      return this.svg.rect(0, 0, this.W, this.H, {
        fill: 'url(#grad)',
        stroke: 'none',
        opacity: 0.7
      });
    };

    RadShade.prototype.set_spot = function(pH) {
      var calibrate, r, target, x, y;
      x = pH.x, y = pH.y, r = pH.r, target = pH.target, calibrate = pH.calibrate;
      if (calibrate == null) {
        calibrate = {};
      }
      if (calibrate.x == null) {
        calibrate.x = 0;
      }
      if (calibrate.y == null) {
        calibrate.y = 0;
      }
      if (target) {
        x = target.left_x() + Math.round(target.outerWidth() / 2);
        y = target.top_y() + Math.round(target.outerHeight() / 2);
      }
      if (x != null) {
        x += calibrate.x;
      }
      if (y != null) {
        y += calibrate.y;
      }
      if (x != null) {
        this.grad.attr({
          cx: (x / this.W * 100) + '%'
        });
      }
      if (y != null) {
        this.grad.attr({
          cy: (y / this.H * 100) + '%'
        });
      }
      if (r != null) {
        this.grad.attr({
          r: (r / this.W * 100) + '%'
        });
      }
      return this;
    };

    RadShade.prototype.is_visible = function() {
      return this.div.is(':visible');
    };

    RadShade.prototype.show = function() {
      this.div.off($.support.transition.end);
      this.div.show();
      return this.div.force_reflow().css({
        opacity: 1
      });
    };

    RadShade.prototype.hide = function() {
      this.div.css({
        opacity: 0
      });
      return this.div.one($.support.transition.end, (function(_this) {
        return function() {
          return _this.div.hide();
        };
      })(this));
    };

    RadShade.prototype.destroy = function() {
      this.div.svg('destroy');
      return this.div.remove();
    };

    return RadShade;

  })();
  return $(function() {
    return $.support.transition = (function() {
      var transitionEnd;
      transitionEnd = (function() {
        var cssName, el, name, transEndEventNames;
        el = document.createElement('trans');
        transEndEventNames = {
          'WebkitTransition': 'webkitTransitionEnd',
          'MozTransition': 'transitionend',
          'OTransition': 'oTransitionEnd otransitionend',
          'transition': 'transitionend'
        };
        for (name in transEndEventNames) {
          cssName = transEndEventNames[name];
          if (el.style[name] != null) {
            return cssName;
          }
        }
      })();
      return transitionEnd && {
        end: transitionEnd
      };
    })();
  });
})(jQuery, window, document);

//# sourceMappingURL=common.js.map
