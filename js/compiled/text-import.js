// Generated by CoffeeScript 1.9.3
"use strict";
!(function($, win, doc) {
  var $doc, $win;
  $doc = $(doc);
  $win = $(win);
  return win.TEXTreader = (function() {
    function TEXTreader(options) {
      var defaults;
      defaults = {
        text: {}
      };
      this.opt = $.extend({}, defaults, options);
      this.lines = this.opt.text.split('\n');
      this.i = 0;
      this.build_content();
    }

    TEXTreader.prototype.build_content = function() {
      return this.read();
    };

    TEXTreader.prototype.read_element = function(lines, el) {
      var desc, description, ill, j, line, link, m, skip, struct, title;
      line = lines[0];
      m = line.match(/^\-\s(.*)$/);
      if (m) {
        title = m[1];
      }
      j = 1;
      struct = [];
      desc = [];
      while (lines[j] && lines[j].substr(0, 2) === '  ') {
        line = lines[j].replace(/^\s\s/, '');
        j++;
        if (!line) {
          continue;
        }
        m = line.match(/^\[(.*)\]$/);
        if (m) {
          link = m[1];
          skip = true;
        } else {
          m = line.match(/^Илл\.\:\s(.*)$/);
          if (m) {
            ill = m[1];
            skip = true;
          } else {
            skip = false;
          }
        }
        if (line.substr(0, 2) === '  ' || line.substr(0, 2) === '- ') {
          struct.push(line);
        } else {
          if (!skip) {
            desc.push(line);
          }
        }
      }
      description = desc.join('\n');
      el.title = title || '';
      el.description = description || '';
      if (link) {
        el.link = {
          url: link
        };
      }
      if (ill) {
        el.picture = {
          url: ill,
          width: 100,
          height: 100
        };
      }
      return this.read_structure(struct, el);
    };

    TEXTreader.prototype.read_structure = function(lines, el) {
      var C, child, children, i, k, len;
      children = lines.join('\n');
      if (!children) {
        return;
      }
      children = children.split('\n- ');
      for (i = k = 0, len = children.length; k < len; i = ++k) {
        child = children[i];
        if (i > 0) {
          child = '- ' + child;
        }
        lines = child.split('\n');
        C = el.create_child();
        C = this.system[C];
        this.read_element(lines, C);
      }
      return el.structure = 'list.bricks';
    };

    TEXTreader.prototype.read = function() {
      this.system = new S({
        root: 'iSystem',
        iSystem: new A({
          title: 'New'
        })
      });
      this.read_element(this.lines, this.system.iSystem);
      return this.system;
    };

    return TEXTreader;

  })();
})(jQuery, window, document);

//# sourceMappingURL=text-import.js.map
