// Generated by CoffeeScript 1.9.3
"use strict";
!(function($, win, doc) {
  var $doc, $win;
  $doc = $(doc);
  $win = $(win);
  return win.Viewer = (function() {
    function Viewer(options) {
      var defaults;
      defaults = {
        div: 'canvas',
        model: {},
        smooth: false,
        svg: null
      };
      this.opt = $.extend({}, defaults, options);
      this.div = $('#' + this.opt.div);
      this.wrapper = this.div.parent();
      this.build_content();
      this.controller();
    }

    Viewer.prototype.build_content = function() {
      this.scale = 1;
      this.save_canvas_size();
      this.controls = new Ractive({
        el: 'controls',
        template: '#map-controls',
        data: {
          zoomlock: '',
          is_drawing: false,
          progress: 0
        }
      });
      this.minimap = $('#minimap .model');
      this.viewport = $('#minimap .view');
      this.quickdrag = $('#minimap .map');
      this.wrapper.addClass('drag');
      if (this.opt.smooth) {
        this.div.addClass('smooth-transform');
      }
      $('#wrapper').css({
        backgroundColor: Theme.color.background
      });
      return this.update_minimap();
    };

    Viewer.prototype.controller = function() {
      this.controls.on({
        'zoom-in': (function(_this) {
          return function() {
            return _this.zoom_step(true);
          };
        })(this),
        'zoom-out': (function(_this) {
          return function() {
            return _this.zoom_step(false);
          };
        })(this),
        'clear-search': (function(_this) {
          return function() {
            return _this.controls.set('search', '');
          };
        })(this),
        'show-search-results': (function(_this) {
          return function(e) {
            var ref;
            if ((ref = e.original.which) === $.key.Down || ref === $.key.Enter) {
              $('#filter-dropdown').dropdown('toggle');
              return false;
            }
          };
        })(this),
        'goto': (function(_this) {
          return function(e) {
            var id;
            id = e.context.link;
            if (id) {
              _this.find_and_zoom(id);
            }
            e.original.preventDefault();
            return false;
          };
        })(this)
      });
      this.controls.observe({
        'search': (function(_this) {
          return function(query) {
            return _this.search(query);
          };
        })(this)
      });
      $win.on('keydown.viewer', (function(_this) {
        return function(e) {
          if (e.which === $.key.Ctrl) {
            _this.wrapper.addClass('zoom_fit');
          }
          if ($.activeInput()) {
            return true;
          } else if (e.shiftKey) {
            switch (e.which) {
              case $.key.Plus:
              case $.key.Plus_num:
                _this.zoom_step(true);
                break;
              case $.key.Minus:
              case $.key.Minus_num:
                _this.zoom_step(false);
                break;
              case $.key.Up:
                _this.pan_step(0, +1);
                break;
              case $.key.Down:
                _this.pan_step(0, -1);
                break;
              case $.key.Left:
                _this.pan_step(+1, 0);
                break;
              case $.key.Right:
                _this.pan_step(-1, 0);
                break;
              default:
                return true;
            }
            return false;
          } else {
            switch (e.which) {
              case $.key.Plus:
              case $.key.Plus_num:
                _this.zoom_step(true);
                break;
              case $.key.Minus:
              case $.key.Minus_num:
                _this.zoom_step(false);
                break;
              case $.key.n8_num:
                _this.pan_step(0, +1);
                break;
              case $.key.n2_num:
                _this.pan_step(0, -1);
                break;
              case $.key.n4_num:
                _this.pan_step(+1, 0);
                break;
              case $.key.n6_num:
                _this.pan_step(-1, 0);
                break;
              case $.key.n7_num:
                _this.pan_step(+1, +1);
                break;
              case $.key.n9_num:
                _this.pan_step(-1, +1);
                break;
              case $.key.n1_num:
                _this.pan_step(+1, -1);
                break;
              case $.key.n3_num:
                _this.pan_step(-1, -1);
                break;
              case $.key.Slash:
              case $.key.Slash_cyr:
              case $.key.Slash_num:
                $('#search input').focus().select();
                return false;
              default:
                return true;
            }
            return false;
          }
          return true;
        };
      })(this));
      $win.on('keyup.viewer', (function(_this) {
        return function(e) {
          if (e.which === $.key.Ctrl) {
            return _this.wrapper.removeClass('zoom_fit');
          }
        };
      })(this));
      this.wrapper.on('mousewheel.viewer', (function(_this) {
        return function(e) {
          var factor;
          _this.fix_point(e.pageX - _this.wrapper.offset().left, e.pageY - _this.wrapper.offset().top);
          factor = e.deltaY > 0 ? _this.Settings.zoomInStepMouse : _this.Settings.zoomOutStepMouse;
          _this.zoom_by(factor);
          return false;
        };
      })(this));
      $win.on('dblclick.viewer', (function(_this) {
        return function(e) {
          var el;
          el = $(e.target).closest('g').data('model');
          if (el) {
            _this.find_and_zoom(el);
          }
          return false;
        };
      })(this));
      $('#search, #zoom-control').on('mousedown', (function(_this) {
        return function(e) {
          return e.stopPropagation();
        };
      })(this));
      $('#search').on('mousedown', (function(_this) {
        return function(e) {
          return $('#search input').focus();
        };
      })(this));
      this.wrapper.on('mousedown.viewer', (function(_this) {
        return function(e) {
          var el;
          $.clearSelection();
          if ($.activeInput()) {
            doc.activeElement.blur();
          }
          if (e.ctrlKey) {
            el = $(e.target).closest('g')[0];
            if (el) {
              _this.zoom_fit(el.instance);
            }
            return;
          }
          _this.wrapper.addClass('dragging');
          _this.dragging = {
            x: e.clientX,
            y: e.clientY
          };
          e.preventDefault();
          return false;
        };
      })(this));
      this.wrapper.on('mousemove.viewer', (function(_this) {
        return function(e) {
          if (!_this.dragging) {
            return;
          }
          if (_this.opt.smooth) {
            _this.div.removeClass('smooth-transform');
          }
          _this.pan_by(e.clientX - _this.dragging.x, e.clientY - _this.dragging.y);
          _this.dragging.x = e.clientX;
          return _this.dragging.y = e.clientY;
        };
      })(this));
      $win.on('mouseup.viewer', (function(_this) {
        return function(e) {
          _this.wrapper.trigger('mousemove', e);
          _this.wrapper.removeClass('dragging');
          _this.dragging = null;
          if (_this.opt.smooth) {
            return _this.div.addClass('smooth-transform');
          }
        };
      })(this));
      this.quickdrag.on('mousedown.viewer', (function(_this) {
        return function(e) {
          $.clearSelection();
          if ($.activeInput()) {
            doc.activeElement.blur();
          }
          _this.wrapper.addClass('dragging');
          _this.dragging = {
            x: e.clientX,
            y: e.clientY
          };
          e.preventDefault();
          return false;
        };
      })(this));
      this.quickdrag.on('mousemove.viewer', (function(_this) {
        return function(e) {
          if (!_this.dragging) {
            return;
          }
          if (_this.opt.smooth) {
            _this.div.removeClass('smooth-transform');
          }
          _this.pan_by((e.clientX - _this.dragging.x) * 5, (e.clientY - _this.dragging.y) * 5);
          _this.dragging.x = e.clientX;
          return _this.dragging.y = e.clientY;
        };
      })(this));
      $win.on('resize.viewer', (function(_this) {
        return function(e) {
          return _this.update_minimap();
        };
      })(this));
      if (this.opt.smooth) {
        return this.div.on('transitionend webkitTransitionEnd oTransitionEnd', (function(_this) {
          return function(e) {
            return _this.update_minimap();
          };
        })(this));
      }
    };

    Viewer.prototype.Settings = {
      zoomInStep: 1.25,
      zoomOutStep: 0.8,
      zoomInStepMouse: 1.111111,
      zoomOutStepMouse: 0.9,
      scaleDuration: 100,
      panStep: 100,
      minisize: 0.05,
      miniH: 100,
      miniW: 100
    };

    Viewer.prototype.save_canvas_size = function(w, h) {
      this.original_width = w || this.div.width();
      return this.original_height = h || this.div.height();
    };

    Viewer.prototype.update_minimap = function() {
      var dp, mh, ml, mt, mw, vh, vl, vt, vw;
      vw = this.wrapper.width() * this.Settings.minisize;
      vh = this.wrapper.height() * this.Settings.minisize;
      vl = (this.Settings.miniW - vw) / 2;
      vt = (this.Settings.miniH - vh) / 2;
      this.viewport.css({
        width: vw,
        height: vh,
        left: vl,
        top: vt
      });
      mw = this.div.width() * this.Settings.minisize;
      mh = this.div.height() * this.Settings.minisize;
      dp = this.div.position();
      ml = dp.left * this.Settings.minisize + vl;
      mt = dp.top * this.Settings.minisize + vt;
      return this.minimap.css({
        width: mw,
        height: mh,
        left: ml,
        top: mt
      });
    };

    Viewer.prototype.search = function(query) {
      var el, filtered, id, j, len, ref, ref1, ref2, system;
      if (query === '') {
        this.filtered = [];
        this.search_query = '';
        this.controls.set('filtered', []);
        return;
      }
      system = ((ref = win.modelview) != null ? (ref1 = ref.opt) != null ? ref1.model : void 0 : void 0) || null;
      if (this.search_query !== query) {
        this.search_from = null;
        this.search_query = query;
        this.filtered = system.findAll(query);
        filtered = [];
        ref2 = this.filtered;
        for (j = 0, len = ref2.length; j < len; j++) {
          el = ref2[j];
          filtered.push({
            link: el,
            title: system[el].nav_title()
          });
        }
        this.controls.set('filtered', filtered);
      }
      if (system) {
        id = system.find(query, this.search_from);
      }
      if (id) {
        this.find_and_zoom(id);
      }
      return this.search_from = id;
    };

    Viewer.prototype.lock_zoom = function(param) {
      return this.controls.set('zoomlock', param);
    };

    Viewer.prototype.zoom_step = function(zoomin) {
      var factor;
      this.fix_point(this.wrapper.width() / 2, this.wrapper.height() / 2);
      factor = zoomin ? this.Settings.zoomInStep : this.Settings.zoomOutStep;
      return this.zoom_by(factor);
    };

    Viewer.prototype.zoom_by = function(factor) {
      var scale;
      scale = Math.max(Theme.minzoom, Math.min(Theme.maxzoom, this.scale * factor));
      return this.apply_scale(scale);
    };

    Viewer.prototype.zoom = function(zoom) {
      return this.apply_scale(zoom);
    };

    Viewer.prototype.scale_content = function(scale, dx, dy) {};

    Viewer.prototype.apply_scale = function(scale) {
      var newh, newl, newt, neww, oldh, oldpos, oldw;
      this.scale = scale;
      this.lock_zoom(this.scale === Theme.minzoom ? 'min' : this.scale === Theme.maxzoom ? 'max' : '');
      oldw = this.div.width();
      oldh = this.div.height();
      oldpos = this.div.position();
      neww = this.original_width * this.scale;
      newh = this.original_height * this.scale;
      newl = this.fixed_x + (neww / oldw) * (oldpos.left - this.fixed_x);
      newt = this.fixed_y + (newh / oldh) * (oldpos.top - this.fixed_y);
      newl = Math.min(Math.max(newl, -neww), this.wrapper.width());
      newt = Math.min(Math.max(newt, -newh), this.wrapper.height());
      this.scale_content(this.scale, (newl - oldpos.left) / this.scale, (newt - oldpos.top) / this.scale).then((function(_this) {
        return function() {
          return _this.div.css({
            width: neww,
            height: newh,
            left: newl,
            top: newt
          });
        };
      })(this));
      return this.update_minimap();
    };

    Viewer.prototype.pan_by = function(dx, dy) {
      var newl, newt, oldpos;
      oldpos = this.div.position();
      newl = oldpos.left + dx;
      newt = oldpos.top + dy;
      newl = Math.min(Math.max(newl, -this.div.width()), this.wrapper.width());
      newt = Math.min(Math.max(newt, -this.div.height()), this.wrapper.height());
      this.div.css({
        left: newl,
        top: newt
      });
      return this.update_minimap();
    };

    Viewer.prototype.pan_step = function(dx, dy) {
      return this.pan_by(dx * this.Settings.panStep, dy * this.Settings.panStep);
    };

    Viewer.prototype.fix_point = function(x, y) {
      this.fixed_x = x;
      return this.fixed_y = y;
    };

    Viewer.prototype.zoom_fit_all = function() {
      var scale;
      this.fix_point(0, 0);
      scale = Math.min(this.wrapper.height() / this.div.height(), this.wrapper.width() / this.div.width());
      return this.apply_scale(scale);
    };

    Viewer.prototype.find = function(tag) {
      return this.div.find('g[data-model="' + tag + '"]');
    };

    Viewer.prototype.find_and_zoom = function(tag) {
      var el;
      el = this.div.find('g[data-model="' + tag + '"]')[0];
      if (el) {
        return this.zoom_fit(el.instance);
      }
    };

    Viewer.prototype.find_and_pan = function(tag) {
      var el;
      el = this.div.find('g[data-model="' + tag + '"]')[0];
      if (el) {
        return this.pan_to(el.instance);
      }
    };

    Viewer.prototype.pan_to = function(el) {
      var div_rect, dx, dy, rect;
      rect = el.node.getBoundingClientRect();
      div_rect = this.div.offset();
      dx = rect.left + rect.width / 2 - div_rect.left;
      dy = rect.top + rect.height / 2 - div_rect.top;
      this.div.css({
        left: -dx + this.wrapper.width() / 2,
        top: -dy + this.wrapper.height() / 2
      });
      return this.update_minimap();
    };

    Viewer.prototype.zoom_fit = function(el) {
      var factor, rbox;
      this.fix_point(0, 0);
      rbox = el.rbox();
      factor = Math.min((this.wrapper.height() - Theme.margin) / rbox.height, (this.wrapper.width() - Theme.margin) / rbox.width);
      this.zoom_by(factor);
      return this.pan_to(el);
    };

    Viewer.prototype.in_center = function() {
      var el, node, p, x, y;
      p = this.wrapper.offset();
      x = p.left + this.wrapper.width() / 2;
      y = p.top + this.wrapper.height() / 2;
      node = doc.elementFromPoint(x, y);
      el = node ? $(node).closest('g').data('model') : null;
      return el;
    };

    Viewer.prototype.is_too_big = function(tag) {
      var el, rbox;
      el = this.div.find('g[data-model="' + tag + '"]')[0];
      if (el) {
        rbox = el.instance.rbox();
        return this.wrapper.height() < rbox.height || this.wrapper.width() < rbox.width;
      } else {
        return false;
      }
    };

    Viewer.prototype.show_slide = function(el) {
      var node;
      node = this.div.find('[data-model=' + el + ']')[0];
      if (node) {
        return this.zoom_fit(node.instance);
      }
    };

    Viewer.prototype.show_story = function() {
      if (!this.model.story) {
        return;
      }
      $.each(this.model.story, (function(_this) {
        return function(i, el) {
          return $doc.queue('slides', function() {
            return setTimeout(function() {
              _this.show_slide(el);
              return $doc.dequeue('slides');
            }, Theme.slideshow);
          });
        };
      })(this));
      return $doc.dequeue('slides');
    };

    Viewer.prototype.destroy = function() {
      return this.div.empty();
    };

    return Viewer;

  })();
})(jQuery, window, document);

//# sourceMappingURL=viewer.js.map
